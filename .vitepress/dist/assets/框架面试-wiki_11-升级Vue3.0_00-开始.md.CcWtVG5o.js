import{_ as e,c as t,o,a1 as a}from"./chunks/framework.BwTyoF0R.js";const h=JSON.parse('{"title":"开始","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/11-升级Vue3.0/00-开始.md","filePath":"框架面试-wiki/11-升级Vue3.0/00-开始.md"}'),s={name:"框架面试-wiki/11-升级Vue3.0/00-开始.md"},i=a('<h1 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h1><p>学 vue2 之前，先加一节视频</p><ul><li>明确范围：第 3 4 5 章是讲解 vue2 的，第 6 章是讲解 vue3 的。但请一定不要跳过 vue2 直接看 vue3 ，因为两者有前后的继承关系。</li><li>vue2 并不会立马过时，面试肯定会继续考察</li><li>vue2 的语法，绝大部分都可继续在 vue3 中使用。vue3 的升级是很平滑的。如果不适应，我们会在视频中单独指出来。所以，放心学。</li></ul><p><strong>熟悉 vue2 的，可以选择跳过</strong></p><p>React 从 class 到 Hooks ，Vue 从 Option API 到 Composition API。 这都是<strong>面向对象</strong>向<strong>函数式编程</strong>的一个转变，方向是统一的。 说明，面向对象思维，已经无法满足当前前端开发的需求。而需要更加灵活的模式。—— 这里可以好好思考一下，看怎么讲解？？？</p><p>不要再就纠结哪个好，哪个不好<br> （技术永远都是为业务服务的，低成本、稳定、易维护的技术方案就是最优解，大家不要做技术的奴隶、框架的奴隶）</p><hr><p>现有第 6 章，全部放 vue3 的内容</p><p>删掉 6-1</p><p>6-2 6-3 6-4 可以回答 vue3 的响应式原理</p>',10),r=[i];function _(n,p,u,c,l,d){return o(),t("div",null,r)}const m=e(s,[["render",_]]);export{h as __pageData,m as default};
