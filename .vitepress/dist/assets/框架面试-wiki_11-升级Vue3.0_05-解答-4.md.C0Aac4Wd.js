import{_ as e,c as a,o as t,a1 as o}from"./chunks/framework.BwTyoF0R.js";const f=JSON.parse('{"title":"解答-4","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/11-升级Vue3.0/05-解答-4.md","filePath":"框架面试-wiki/11-升级Vue3.0/05-解答-4.md"}'),c={name:"框架面试-wiki/11-升级Vue3.0/05-解答-4.md"},i=o('<h1 id="解答-4" tabindex="-1">解答-4 <a class="header-anchor" href="#解答-4" aria-label="Permalink to &quot;解答-4&quot;">​</a></h1><h2 id="composition-api-如何实现代码逻辑复用" tabindex="-1">Composition API 如何实现代码逻辑复用 <a class="header-anchor" href="#composition-api-如何实现代码逻辑复用" aria-label="Permalink to &quot;Composition API 如何实现代码逻辑复用&quot;">​</a></h2><p>参考 demo <code>MousePosition</code> 目录</p><h2 id="vue3-0-如何实现响应式" tabindex="-1">Vue3.0 如何实现响应式？ <a class="header-anchor" href="#vue3-0-如何实现响应式" aria-label="Permalink to &quot;Vue3.0 如何实现响应式？&quot;">​</a></h2><p>Proxy 实现，现有视频</p><h2 id="watch-和-watcheffect-的区别" tabindex="-1">watch 和 watchEffect 的区别 <a class="header-anchor" href="#watch-和-watcheffect-的区别" aria-label="Permalink to &quot;watch 和 watchEffect 的区别&quot;">​</a></h2><ul><li>两者都可以监听 data 变化</li><li>watch 需要手动确认监听哪个属性</li><li>watchEffect 会根据其中的属性，自动监听其变化</li></ul><p>代码参考 demo <code>WatchEffect.vue</code> <code>Reactive.vue</code> <code>Ref.vue</code></p><h2 id="setup-中如何获取组件实例" tabindex="-1">setup 中如何获取组件实例？ <a class="header-anchor" href="#setup-中如何获取组件实例" aria-label="Permalink to &quot;setup 中如何获取组件实例？&quot;">​</a></h2><p>该问题主要针对 <code>this</code></p><ul><li>若使用 <code>setup</code> 和组合式 API 时，没有 this</li><li>使用 <code>getCurrentInstance</code> 获取当前组件实例 —— 不过，使用组合式 API 一般也无需获取组件实例</li><li>若使用 Options API 的语法，照常有 <code>this</code></li></ul><p>这一点和 react 一样。class 组件有 this ，Hooks 函数组件没有 this 。</p><p>代码参考 <code>GetInstance.vue</code></p>',13),s=[i];function d(r,h,l,n,u,p){return t(),a("div",null,s)}const m=e(c,[["render",d]]);export{f as __pageData,m as default};
