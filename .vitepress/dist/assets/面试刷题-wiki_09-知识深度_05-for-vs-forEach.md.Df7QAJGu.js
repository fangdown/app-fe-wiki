import{_ as a,c as r,o,a1 as e}from"./chunks/framework.BwTyoF0R.js";const u=JSON.parse('{"title":"for vs forEach","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/09-知识深度/05-for-vs-forEach.md","filePath":"面试刷题-wiki/09-知识深度/05-for-vs-forEach.md"}'),t={name:"面试刷题-wiki/09-知识深度/05-for-vs-forEach.md"},h=e('<h1 id="for-vs-foreach" tabindex="-1">for vs forEach <a class="header-anchor" href="#for-vs-foreach" aria-label="Permalink to &quot;for vs forEach&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>for 和 forEach 哪个更快？为什么</p><h2 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h2><p>代码参考 for-foreach.html ，测试结果：for 更快</p><h2 id="创建函数需要开销" tabindex="-1">创建函数需要开销 <a class="header-anchor" href="#创建函数需要开销" aria-label="Permalink to &quot;创建函数需要开销&quot;">​</a></h2><p>for 直接在当前函数中执行，forEach 每次都要新创建一个函数。 函数有单独的作用域和上下文（可回顾“堆栈模型”），所以耗时更久。</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>for 更快，因为 forEach 每次创建函数需要开销</p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>开发中不仅要考虑性能，还要考虑代码的可读性，forEach 可读性更好。</p>',11),c=[h];function i(s,f,n,l,d,_){return o(),r("div",null,c)}const m=a(t,[["render",i]]);export{u as __pageData,m as default};
