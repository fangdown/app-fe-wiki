import{_ as e,c as t,o as a,a1 as o}from"./chunks/framework.BwTyoF0R.js";const S=JSON.parse('{"title":"安全性","description":"","frontmatter":{},"headers":[],"relativePath":"基础面试-wiki/06-运行环境/04-安全性.md","filePath":"基础面试-wiki/06-运行环境/04-安全性.md"}'),r={name:"基础面试-wiki/06-运行环境/04-安全性.md"},i=o('<h1 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><ul><li>【面试】常见的 web 攻击方式有哪些，简述原理？如何预防？</li></ul><h2 id="解决" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h2><p>关于前端安全的知识，建议阅读《白帽子讲web安全》，作者也是一位很传奇的人物，这本书写的浅显易懂，很适合前端工程师阅读。</p><h3 id="常见的-web-攻击方式有哪些-简述原理-如何预防" tabindex="-1">常见的 web 攻击方式有哪些，简述原理？如何预防？ <a class="header-anchor" href="#常见的-web-攻击方式有哪些-简述原理-如何预防" aria-label="Permalink to &quot;常见的 web 攻击方式有哪些，简述原理？如何预防？&quot;">​</a></h3><p>上学的时候就知道有一个“SQL注入”的攻击方式。例如做一个系统的登录界面，输入用户名和密码，提交之后，后端直接拿到数据就拼接 SQL 语句去查询数据库。如果在输入时进行了恶意的 SQL 拼装，那么最后生成的 SQL 就会有问题。但是现在稍微大型的一点系统，都不会这么做，从提交登录信息到最后拿到授权，都经过层层的验证。因此，SQL 注入都只出现在比较低端小型的系统上。</p><p><strong>前端端最常见的攻击就是 XSS（Cross Site Scripting，跨站脚本攻击）</strong>，很多大型网站（例如 FaceBook 都被 XSS 攻击过）。举一个例子，我在一个博客网站正常发表一篇文章，输入汉字、英文和图片，完全没有问题。但是如果我写的是恶意的 js 脚本，例如获取到<code>document.cookie</code>然后传输到自己的服务器上，那我这篇博客的每一次浏览，都会执行这个脚本，都会把自己的 cookie 中的信息偷偷传递到我的服务器上来。</p><p>预防 XSS 攻击就得对输入的内容进行过滤，过滤掉一切可以执行的脚本和脚本链接。大家可以参考<a href="https://github.com/leizongmin/js-xss" target="_blank" rel="noreferrer">xss.js</a>这个开源工具。</p><p>简单总结一下，XSS 其实就是攻击者事先在一个页面埋下攻击代码，让登录用户去访问这个页面，然后偷偷执行代码，拿到当前用户的信息。</p><p><strong>还有一个比较常见的攻击就是 CSRF/XSRF（Cross-site request forgery，跨站请求伪造）</strong>。它是借用了当前操作者的权限来偷偷的完成某个操作，而不是拿到用户的信息。例如，一个购物网站，购物付费的接口是<code>http://buy.com/pay?id=100</code>，而这个接口在使用时没有任何密码或者 token 的验证，只要打开访问就付费购买了。一个用户已经登录了<code>http://buy.com</code>在选择商品时，突然收到一封邮件，而这封邮件正文有这么一行代码<code>&lt;img src=&quot;http://buy.com/pay?id=100&quot;/&gt;</code>，他访问了邮件之后，其实就已经完成了购买。</p><p>预防 CSRF 就是加入各个层级的权限验证，例如现在的购物网站，只要涉及到现金交易，肯定输入密码或者指纹才行。</p>',12),s=[i];function c(n,d,l,_,h,p){return a(),t("div",null,s)}const m=e(r,[["render",c]]);export{S as __pageData,m as default};
