import{_ as a,c as e,o as t,a1 as i}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"节流和防抖","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/03-前端基础知识/02-节流和防抖.md","filePath":"面试刷题-wiki/03-前端基础知识/02-节流和防抖.md"}'),l={name:"面试刷题-wiki/03-前端基础知识/02-节流和防抖.md"},o=i('<h1 id="节流和防抖" tabindex="-1">节流和防抖 <a class="header-anchor" href="#节流和防抖" aria-label="Permalink to &quot;节流和防抖&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>节流和防抖有何区别？分别用于什么场景？</p><h2 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h2><p>防抖，即防止抖动。抖动着就先不管它，等啥时候静止了，再做操作。</p><p>例如，一个搜索输入框，等输入停止之后，自动执行搜索。</p><p>代码参考 <code>debounce.html</code></p><h2 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h2><p>节流，即节省交互沟通。流，可理解为交流，不一定会产生网络流量。</p><p>例如，drag 的回调，上传进度的回调，都可以设置一个固定的频率，没必要那么频繁。</p><p>代码参考 <code>throttle.html</code></p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>防抖和节流都用于处理频繁触发的操作，优化操作体验。</p><p>触发频率</p><ul><li>防抖，不固定</li><li>节流，固定</li></ul><p>场景</p><ul><li>防抖，结果式，即一次调用即可</li><li>节流，过程式，即需要持续一个过程，一次不够</li></ul><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>抓住“触发频率”是否固定，即可抓住重点</li><li>实际项目推荐使用 lodash</li></ul>',19),r=[o];function h(d,n,c,s,_,p){return t(),e("div",null,r)}const f=a(l,[["render",h]]);export{m as __pageData,f as default};
