import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.BwTyoF0R.js";const c=JSON.parse('{"title":"vue 原理","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/03-vue原理/05-原理.md","filePath":"框架面试-wiki/03-vue原理/05-原理.md"}'),l={name:"框架面试-wiki/03-vue原理/05-原理.md"},h=n(`<h1 id="vue-原理" tabindex="-1">vue 原理 <a class="header-anchor" href="#vue-原理" aria-label="Permalink to &quot;vue 原理&quot;">​</a></h1><ul><li>响应式</li><li>vdom</li><li>模板解析</li><li>渲染过程</li><li>异步渲染</li></ul><hr><h2 id="响应式" tabindex="-1">响应式 <a class="header-anchor" href="#响应式" aria-label="Permalink to &quot;响应式&quot;">​</a></h2><p>响应式的作用：<strong>监听 data 数据变化</strong>，仅此而已。所以，不要掺杂进其他功能进来。</p><p>回顾 Object.defineProperty 方式</p><h2 id="vdom" tabindex="-1">vdom <a class="header-anchor" href="#vdom" aria-label="Permalink to &quot;vdom&quot;">​</a></h2><p>回顾 vdom</p><ul><li>h 函数</li><li>vnode 结构</li><li>patch 函数</li></ul><hr><h2 id="模板解析" tabindex="-1">模板解析 <a class="header-anchor" href="#模板解析" aria-label="Permalink to &quot;模板解析&quot;">​</a></h2><h3 id="with-语法" tabindex="-1">with 语法 <a class="header-anchor" href="#with-语法" aria-label="Permalink to &quot;with 语法&quot;">​</a></h3><ul><li>改变 {} 内自由变量，当做 obj 属性来查找</li><li>如果找不到会报错</li><li>with 要慎用，因为它打破了作用域的规则</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj.c) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 with ，能改变 {} 内自由变量的查找方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 {} 内自由变量，当做 obj 的属性来查找</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会报错 ！！！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="编译-render-函数" tabindex="-1">编译 render 函数 <a class="header-anchor" href="#编译-render-函数" aria-label="Permalink to &quot;编译 render 函数&quot;">​</a></h3><ul><li>原生 html 不识别指令</li><li>html 是静态标记语言，不具备运算能力（不是图灵完备的语言，不能顺序、判断、循环运算）</li><li>将 html 模板转换为 js 函数（render 函数）</li><li>执行 render 函数，生成 vnode。重要！！！</li></ul><p>如何转换，参考 vue-template-compiler 示例</p><h3 id="vue-函数式组件" tabindex="-1">vue 函数式组件 <a class="header-anchor" href="#vue-函数式组件" aria-label="Permalink to &quot;vue 函数式组件&quot;">​</a></h3><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6" target="_blank" rel="noreferrer">https://cn.vuejs.org/v2/guide/render-function.html#函数式组件</a></p><p>使用 render 函数代替 template</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;heading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // template: \`xxxx\`,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;h&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.level,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          attrs: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;headerId&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            href: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;headerId&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this is a tag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><hr><h2 id="渲染过程" tabindex="-1">渲染过程 <a class="header-anchor" href="#渲染过程" aria-label="Permalink to &quot;渲染过程&quot;">​</a></h2><h3 id="回顾-3-个要点" tabindex="-1">回顾 3 个要点 <a class="header-anchor" href="#回顾-3-个要点" aria-label="Permalink to &quot;回顾 3 个要点&quot;">​</a></h3><ul><li>响应式 监听数据 get set</li><li>模板解析 生成 render 函数，执行则返回 vnode</li><li>vdom 根据 vnode 渲染/更新 DOM</li></ul><h3 id="初次渲染过程" tabindex="-1">初次渲染过程 <a class="header-anchor" href="#初次渲染过程" aria-label="Permalink to &quot;初次渲染过程&quot;">​</a></h3><ul><li>对 data 进行响应式处理，监听 get set</li><li>解析模板为 render 函数（<strong>这一步可能在开发环境打包时就已经完成，重要！！！</strong>）</li><li>执行 render 函数，生成 vnode <ul><li>这一步会触发 data getter ，收集依赖，重要！！！</li><li>将该数据 “观察”起来</li><li>注意，不一定所有的 data 都会被观察，得看模板中是否用到了，如下图。</li></ul></li><li>将 vnode 渲染到页面上</li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{{message}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会触发 get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            city: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;北京&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 不会触发 get ，因为模板没用到，即和视图没关系</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="数据更新过程" tabindex="-1">数据更新过程 <a class="header-anchor" href="#数据更新过程" aria-label="Permalink to &quot;数据更新过程&quot;">​</a></h3><ul><li>修改“被观察的”数据，触发 data setter</li><li>重新执行 render 函数，生成 newVnode</li><li>patch(vnode, newVnode)</li></ul><h3 id="图示" tabindex="-1">图示 <a class="header-anchor" href="#图示" aria-label="Permalink to &quot;图示&quot;">​</a></h3><p>vue 官网的流程图 <a href="https://cn.vuejs.org/images/data.png" target="_blank" rel="noreferrer">https://cn.vuejs.org/images/data.png</a></p><hr><h2 id="异步渲染" tabindex="-1">异步渲染 <a class="header-anchor" href="#异步渲染" aria-label="Permalink to &quot;异步渲染&quot;">​</a></h2><p>回顾 nextTick</p><ul><li>异步渲染</li><li>汇总 data 变化，一次性渲染</li><li>尽量减少渲染次数，提高性能</li></ul>`,36),e=[h];function t(p,k,r,E,d,o){return a(),i("div",null,e)}const y=s(l,[["render",t]]);export{c as __pageData,y as default};
