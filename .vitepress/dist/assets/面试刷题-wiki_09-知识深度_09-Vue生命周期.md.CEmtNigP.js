import{_ as a,c as e,o as s,a1 as i}from"./chunks/framework.BwTyoF0R.js";const t="/assets/vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.DRCXGGmG.png",m=JSON.parse('{"title":"Vue 生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/09-知识深度/09-Vue生命周期.md","filePath":"面试刷题-wiki/09-知识深度/09-Vue生命周期.md"}'),n={name:"面试刷题-wiki/09-知识深度/09-Vue生命周期.md"},o=i('<h1 id="vue-生命周期" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期" aria-label="Permalink to &quot;Vue 生命周期&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>Vue 每个生命周期都做了什么</p><h2 id="vue-生命周期-1" tabindex="-1">Vue 生命周期 <a class="header-anchor" href="#vue-生命周期-1" aria-label="Permalink to &quot;Vue 生命周期&quot;">​</a></h2><p><img src="'+t+`" alt=""></p><h2 id="beforecreate" tabindex="-1">beforeCreate <a class="header-anchor" href="#beforecreate" aria-label="Permalink to &quot;beforeCreate&quot;">​</a></h2><p>初始化一个空的 Vue 实例，<code>data</code> <code>methods</code> 等尚未被初始化，无法调用。</p><h2 id="created" tabindex="-1">created <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created&quot;">​</a></h2><p>Vue 实例初始化完成，<code>data</code> <code>methods</code> 都已初始化完成，可调用。<br> 但尚未开始渲染模板。</p><h2 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h2><p>编译模板，调用 <code>render</code> 函数生成 vdom ，但还没有开始渲染 DOM</p><h2 id="mounted" tabindex="-1">mounted <a class="header-anchor" href="#mounted" aria-label="Permalink to &quot;mounted&quot;">​</a></h2><p>渲染 DOM 完成，页面更新。组件创建完成，开始进入运行阶段。</p><h2 id="beforeupdate" tabindex="-1">beforeUpdate <a class="header-anchor" href="#beforeupdate" aria-label="Permalink to &quot;beforeUpdate&quot;">​</a></h2><p>在数据发生改变后，DOM 被更新之前被调用。这里适合在现有 DOM 将要被更新之前访问它，比如移除手动添加的事件监听器。</p><h2 id="updated" tabindex="-1">updated <a class="header-anchor" href="#updated" aria-label="Permalink to &quot;updated&quot;">​</a></h2><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后被调用。</p><p>注意，尽量不要在 <code>updated</code> 中继续修改数据，否则可能会触发死循环。</p><h2 id="onactivated" tabindex="-1">onActivated <a class="header-anchor" href="#onactivated" aria-label="Permalink to &quot;onActivated&quot;">​</a></h2><p>被 <code>keep-alive</code> 缓存的组件激活时调用。</p><h2 id="ondeactivated" tabindex="-1">onDeactivated <a class="header-anchor" href="#ondeactivated" aria-label="Permalink to &quot;onDeactivated&quot;">​</a></h2><p>被 <code>keep-alive</code> 缓存的组件停用时调用。</p><h2 id="beforeunmount" tabindex="-1">beforeUnmount <a class="header-anchor" href="#beforeunmount" aria-label="Permalink to &quot;beforeUnmount&quot;">​</a></h2><p>组件进入销毁阶段。</p><p>卸载组件实例后调用，在这个阶段，实例仍然是完全正常的。<br> 移除、解绑一些全局事件、自定义事件，可以在此时操作。</p><h2 id="unmounted" tabindex="-1">unmounted <a class="header-anchor" href="#unmounted" aria-label="Permalink to &quot;unmounted&quot;">​</a></h2><p>卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</p><hr><h2 id="连环问-如何正确的操作-dom" tabindex="-1">连环问：如何正确的操作 DOM <a class="header-anchor" href="#连环问-如何正确的操作-dom" aria-label="Permalink to &quot;连环问：如何正确的操作 DOM&quot;">​</a></h2><p><code>mounted</code> 和 <code>updated</code> 都不会保证所有子组件都挂载完成，如果想等待所有视图都渲染完成，需要使用 <code>$nextTick</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 仅在整个视图都被渲染之后才会运行的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="连环问-ajax-放在哪个生命周期合适" tabindex="-1">连环问：ajax 放在哪个生命周期合适？ <a class="header-anchor" href="#连环问-ajax-放在哪个生命周期合适" aria-label="Permalink to &quot;连环问：ajax 放在哪个生命周期合适？&quot;">​</a></h2><p>一般有两个选择：<code>created</code> 和 <code>mounted</code> ，建议选择后者 <code>mounted</code> 。</p><p>执行速度</p><ul><li>从理论上来说，放在 <code>created</code> 确实会快一些</li><li>但 ajax 是网络请求，其时间是主要的影响因素。从 <code>created</code> 到 <code>mounted</code> 是 JS 执行，速度非常快。</li><li>所以，两者在执行速度上不会有肉眼可见的差距</li></ul><p>代码的阅读和理解</p><ul><li>放在 <code>created</code> 却会带来一些沟通和理解成本，从代码的执行上来看，它会一边执行组件渲染，一边触发网络请求，并行</li><li>放在 <code>mounted</code> 就是等待 DOM 渲染完成再执行网络请求，串行，好理解</li></ul><p>所以，综合来看，更建议选择 <code>mounted</code> 。</p><h2 id="连环问-composition-api-生命周期有何不同" tabindex="-1">连环问：Composition API 生命周期有何不同 <a class="header-anchor" href="#连环问-composition-api-生命周期有何不同" aria-label="Permalink to &quot;连环问：Composition API 生命周期有何不同&quot;">​</a></h2><ul><li><code>setup</code> 代替了 <code>beforeCreate</code> 和 <code>created</code></li><li>生命周期换成了函数的形式，如 <code>mounted</code> -&gt; <code>onMounted</code> 参考 <a href="https://v3.cn.vuejs.org/api/composition-api.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/api/composition-api.html#生命周期钩子</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onUpdated, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mounted&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onUpdated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;updated&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,41),d=[o];function l(h,p,r,c,k,u){return s(),e("div",null,d)}const g=a(n,[["render",l]]);export{m as __pageData,g as default};
