import{_ as e,c as o,o as a,a1 as s}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"其他 Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/10-升级-React-Hooks/03-其他Hooks.md","filePath":"框架面试-wiki/10-升级-React-Hooks/03-其他Hooks.md"}'),t={name:"框架面试-wiki/10-升级-React-Hooks/03-其他Hooks.md"},l=s('<h1 id="其他-hooks" tabindex="-1">其他 Hooks <a class="header-anchor" href="#其他-hooks" aria-label="Permalink to &quot;其他 Hooks&quot;">​</a></h1><p>下面这些 hooks 优先级并不高，不是那么常用。但是你至少要知道它是干嘛的，以便后面用到时再详细查询。 所以，下面我们就依次看看，这些 hooks 的介绍和基本使用，做一个大概的了解即可。</p><h2 id="useref" tabindex="-1">useRef <a class="header-anchor" href="#useref" aria-label="Permalink to &quot;useRef&quot;">​</a></h2><p>可用于获取 DOM 元素，参考 <code>UseRefDemo.js</code> 中的代码</p><h2 id="usecontext" tabindex="-1">useContext <a class="header-anchor" href="#usecontext" aria-label="Permalink to &quot;useContext&quot;">​</a></h2><p>（先回顾一下之前的 Context 知识，借用之前 ppt 和源码）</p><p>Hooks 中使用 <code>useContext</code> 来获取 context 的值</p><p>参考 <code>UseContextDemo.js</code> 代码。</p><h2 id="usereducer" tabindex="-1">useReducer <a class="header-anchor" href="#usereducer" aria-label="Permalink to &quot;useReducer&quot;">​</a></h2><p>（先回顾一下 redux 的流程，和各个概念）</p><p>参考 <code>UseReducerDemo.js</code> 代码</p><p>useReducer 和 redux 不同</p><ul><li>useReducer 是 useState 的代替方案，用于更复杂的 state 变化逻辑</li><li>useReducer 还是单组件的状态管理，多组件通讯还是需要 props 传递数据</li><li>redux 是全局的状态管理，多组件可共享数据</li></ul><h2 id="usememo" tabindex="-1">useMemo <a class="header-anchor" href="#usememo" aria-label="Permalink to &quot;useMemo&quot;">​</a></h2><p>（先回顾一下之前的性能优化部分的知识，借用之前 ppt 和源码）</p><ul><li>React 默认更新所有子组件</li><li>Class 组件使用 SCU 或者 PureComponent 进行优化</li><li>Hooks 里使用 useMemo（但道理是一样的）</li></ul><p>参考 <code>UseMemoDemo.js</code> 代码演示</p><h2 id="usecallback" tabindex="-1">useCallback <a class="header-anchor" href="#usecallback" aria-label="Permalink to &quot;useCallback&quot;">​</a></h2><p>在 useMemo 的基础上继续，如果是函数传递给子组件，怎么办？</p><ul><li>useMemo 封装数据</li><li>useCallback 封装函数</li></ul><p>参考 <code>UseCallbackDemo.js</code> 代码演示</p>',21),c=[l];function r(u,i,d,n,p,h){return a(),o("div",null,c)}const _=e(t,[["render",r]]);export{m as __pageData,_ as default};
