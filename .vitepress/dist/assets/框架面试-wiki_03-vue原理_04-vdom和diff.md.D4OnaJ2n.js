import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.BwTyoF0R.js";const g=JSON.parse('{"title":"vdom 和 diff","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/03-vue原理/04-vdom和diff.md","filePath":"框架面试-wiki/03-vue原理/04-vdom和diff.md"}'),e={name:"框架面试-wiki/03-vue原理/04-vdom和diff.md"},l=n(`<h1 id="vdom-和-diff" tabindex="-1">vdom 和 diff <a class="header-anchor" href="#vdom-和-diff" aria-label="Permalink to &quot;vdom 和 diff&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>基于组件化，数据驱动视图。只需关心数据，无需关系 DOM ，好事儿。</p><p>但是，JS 运行非常快，DOM 操作却非常慢，如何让“数据驱动视图”能快速响应？</p><hr><h2 id="引入-vdom" tabindex="-1">引入 vdom <a class="header-anchor" href="#引入-vdom" aria-label="Permalink to &quot;引入 vdom&quot;">​</a></h2><p>用 vnode 表示真实 DOM 结构</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;vdom&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font-size: 20px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;a&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">ul</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;container&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vdom&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            props: { style: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;font-size: 20px&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            children: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    tag: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;li&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>演示 vdom 的使用（对比不用 vdom 的情况）—— snabbdom 和 jquery</p><hr><h2 id="使用-vdom-能快速操作-dom" tabindex="-1">使用 vdom 能快速操作 DOM <a class="header-anchor" href="#使用-vdom-能快速操作-dom" aria-label="Permalink to &quot;使用 vdom 能快速操作 DOM&quot;">​</a></h2><ul><li>JS 执行很快</li><li>DOM 操作很慢</li></ul><p>如何让 DOM 操作最快？—— 尽可能减少 DOM 操作，只操作需要更新的，不做多余操作。</p><p>如何尽量减少 DOM 操作？—— 两个 vnode 进行 diff ，找出不同。diff 是 JS 执行，会很快。 （画图示例，两棵 vnode ，找出不同）</p><hr><h2 id="diff-算法概述" tabindex="-1">diff 算法概述 <a class="header-anchor" href="#diff-算法概述" aria-label="Permalink to &quot;diff 算法概述&quot;">​</a></h2><p>diff 算法是一个很广泛的，前端常见的例如文本 diff ，json 对象 diff ，还有这里的“树 diff”。</p><ul><li>文本 diff ，例如 linux 的 diff 命令</li><li>json diff ，例如 <a href="https://github.com/cujojs/jiff" target="_blank" rel="noreferrer">https://github.com/cujojs/jiff</a></li><li>树 diff ，如 vdom diff</li></ul><p><strong>diff 两棵树的时间复杂度是 <code>O(n^3)</code></strong>（不可用的复杂度），例如 <code>diff(Tree1, Tree2)</code></p><ul><li>遍历 Tree1 ，每个节点都要和 Tree2 对比</li><li>针对 Tree1 的节点，遍历 Tree2 每个节点和它对比</li><li>重新排序</li></ul><p>但是，vdom diff 算法做了几个改进，<strong>让复杂度变为 <code>O(n)</code></strong></p><ul><li>只比较同一层级</li><li>tag 或组件不相同的，直接删掉重建，不再继续深入比较</li><li>tag 或组件 &amp; key ，两个都相同的，即认为是相同节点</li></ul><hr><h2 id="diff-算法过程详解" tabindex="-1">diff 算法过程详解 <a class="header-anchor" href="#diff-算法过程详解" aria-label="Permalink to &quot;diff 算法过程详解&quot;">​</a></h2><p>snabbdom <a href="https://github.com/snabbdom/snabbdom" target="_blank" rel="noreferrer">https://github.com/snabbdom/snabbdom</a> 是一款比较简洁、高性能的 vdom lib vue2.x 的 diff 算法完全参考它。 即了解 snabbdom 的 diff 算法，也就了解 vue2.x 的 diff 算法。<strong>应该面试的 diff 算法问题足够了</strong>。</p><p>基本流程</p><ul><li>回顾一下它的基本使用，找出核心的 API <code>h</code> <code>patch</code></li><li>下载 snabbdom 源码</li><li>查看源码</li></ul><p>注意</p><ul><li>解读源码，只看主干和要点，不要去扣细节</li><li>源码是 ts ，但不妨碍我们阅读，不要关注语法细节</li></ul><h3 id="h-函数" tabindex="-1">h 函数 <a class="header-anchor" href="#h-函数" aria-label="Permalink to &quot;h 函数&quot;">​</a></h3><p>【功能】h 函数是一个工厂函数，根据传入的参数，生成 vnode 结构。</p><p>源码在 <code>src/h.ts</code></p><p>输入和输出 <code>function h(sel: string, data: VNodeData, children: VNodeChildren): VNode;</code></p><p>返回 <code>return vnode(sel, data, children, text, undefined);</code></p><h3 id="vnode-函数" tabindex="-1">vnode 函数 <a class="header-anchor" href="#vnode-函数" aria-label="Permalink to &quot;vnode 函数&quot;">​</a></h3><p>源码在 <code>src/vnode.ts</code></p><p>返回 <code>return {sel, data, children, text, elm, key};</code></p><p>这里可以结合 demo 中的断点来看数据结构。此时的 <code>elem</code> 应该是 <code>undefined</code></p><h3 id="text-和-children" tabindex="-1">text 和 children <a class="header-anchor" href="#text-和-children" aria-label="Permalink to &quot;text 和 children&quot;">​</a></h3><p>一个元素或者有 contentText ，后者有 children ，两者不能共存 demo 中有示例</p><h3 id="patch-函数" tabindex="-1">patch 函数 <a class="header-anchor" href="#patch-函数" aria-label="Permalink to &quot;patch 函数&quot;">​</a></h3><p>【功能】patch 函数将 newVnode 更新到 vnode 或者 elem 上，patch 的过程也就是 diff 的过程。</p><p>源码 <code>src/snabbdom.ts</code> ，找到其中的 <code>init</code> 函数，最后返回的就是 <code>patch</code> 函数。</p><p>输入输出 <code>function patch(oldVnode: VNode | Element, vnode: VNode): VNode</code></p><p>（画图：elem 和 oldVnode vnode 的关系） （要考虑第一个参数是 VNode 和 Element 两种情况）</p><h3 id="patchvnode-函数" tabindex="-1">patchVnode 函数 <a class="header-anchor" href="#patchvnode-函数" aria-label="Permalink to &quot;patchVnode 函数&quot;">​</a></h3><p>源码在 <code>src/snabbdom.ts</code></p><p>先看 <code>addVnodes</code> 和 <code>removeVnodes</code> ，最后看 <code>updateChildren</code></p><h3 id="updatechildren-函数" tabindex="-1">updateChildren 函数 <a class="header-anchor" href="#updatechildren-函数" aria-label="Permalink to &quot;updateChildren 函数&quot;">​</a></h3><p>源码在 <code>src/snabbdom.ts</code></p><p>以 todo list 的 items 变化，为例，图解演示即可</p><hr><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>diff 算法中，细节不是关键例如“头头 头尾 对比”等，核心概念才是关键，如 h vnode patch key 等。 所有的 diff 算法，以及无论如何做优化，都离不开这些核心概念</p>`,55),t=[l];function h(d,p,k,o,r,E){return a(),i("div",null,t)}const f=s(e,[["render",h]]);export{g as __pageData,f as default};
