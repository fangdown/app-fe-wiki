import{_ as a,c as e,o as t,a1 as o}from"./chunks/framework.BwTyoF0R.js";const b=JSON.parse('{"title":"括号匹配","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/02-括号匹配.md","filePath":"面试刷题-wiki/06-数据结构和算法/02-括号匹配.md"}'),l={name:"面试刷题-wiki/06-数据结构和算法/02-括号匹配.md"},i=o('<h1 id="括号匹配" tabindex="-1">括号匹配 <a class="header-anchor" href="#括号匹配" aria-label="Permalink to &quot;括号匹配&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>一个字符串内部可能包含 <code>{ }</code> <code>( )</code> <code>[ ]</code> 三种括号，判断该字符串是否是括号匹配的。<br> 如 <code>(a{b}c)</code> 就是匹配的， <code>{a(b</code> 和 <code>{a(b}c)</code> 就是不匹配的。</p><h2 id="栈-stack" tabindex="-1">栈 Stack <a class="header-anchor" href="#栈-stack" aria-label="Permalink to &quot;栈 Stack&quot;">​</a></h2><p>该题目的考察目的很明确 —— 栈</p><p>栈，先进后出，基本的 API</p><ul><li>push</li><li>pop</li><li>length</li></ul><p>和栈相关的数据结构（后面讲）</p><ul><li>队列，先进先出</li><li>堆，如常说的“堆栈模型”</li></ul><h2 id="逻辑结构和物理结构" tabindex="-1">逻辑结构和物理结构 <a class="header-anchor" href="#逻辑结构和物理结构" aria-label="Permalink to &quot;逻辑结构和物理结构&quot;">​</a></h2><p>栈和数组有什么区别？—— 没有可比性，两者不一个级别。就像：房子和石头有什么区别？</p><p>栈是一种逻辑结构，一种理论模型，它可以脱离编程语言单独讲。<br> 数组是一种物理结构，代码的实现，不同的语言，数组语法是不一样的。</p><p>栈可以用数组来表达，也可以用链表来表达，也可以自定义 <code>class MyStack {...}</code> 自己实现…<br> 在 JS 中，栈一般情况下用数组实现。</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><ul><li>遇到左括号 <code>{ ( [</code> 则压栈</li><li>遇到右括号 <code>} ) ]</code> 则判断栈顶，相同的则出栈</li><li>最后判断栈 length 是否为 0</li></ul><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>参考 match-brackets.ts 和 match-brackets.test.ts</p><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>栈</li><li>逻辑结构和物理结构</li></ul>',19),c=[i];function r(d,h,s,n,_,p){return t(),e("div",null,c)}const k=a(l,[["render",r]]);export{b as __pageData,k as default};
