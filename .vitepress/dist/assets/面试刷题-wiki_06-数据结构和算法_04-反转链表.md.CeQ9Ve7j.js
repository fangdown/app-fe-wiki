import{_ as e,c as a,o as t,a1 as i}from"./chunks/framework.BwTyoF0R.js";const o="/assets/react-fiber-%E9%93%BE%E8%A1%A8.CWbq0ZJ9.png",m=JSON.parse('{"title":"反转单向链表","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/04-反转链表.md","filePath":"面试刷题-wiki/06-数据结构和算法/04-反转链表.md"}'),l={name:"面试刷题-wiki/06-数据结构和算法/04-反转链表.md"},r=i('<h1 id="反转单向链表" tabindex="-1">反转单向链表 <a class="header-anchor" href="#反转单向链表" aria-label="Permalink to &quot;反转单向链表&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>定义一个函数，输入一个单向链表的头节点，反转该链表，并输出反转之后的头节点</p><h2 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h2><p>链表是一种物理结构（非逻辑结构），是数组的补充。<br> 数组需要一段连续的内存空间，而链表不需要。</p><p>数据结构</p><ul><li>单向链表 <code>{ value, next }</code></li><li>双向链表 <code>{ value, prev, next }</code></li></ul><p>两者对比</p><ul><li>链表：查询慢，新增和删除较快</li><li>数组：查询快，新增和删除较慢</li></ul><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>React Fiber 就把 vdom 树转换为一个链表，这样才有可能随时中断、再继续进行。<br> 如果 vdom 是树，那只能递归一次性执行完成，中间无法断开。</p><p><img src="'+o+'" alt=""></p><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>反转链表，画图很好理解。没有捷径，遍历一边，重新设置 next 指向即可。<br> 但实际写代码，却并不简单，很容易造成 nextNode 丢失。</p><p>因此，遍历过程中，至少要存储 3 个指针 <code>prevNode</code> <code>curNode</code> <code>nextNode</code></p><p>时间复杂度 <code>O(n)</code></p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>参考 reverse-link-list.ts</p><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>链表</li><li>链表和数组的不同 <ul><li>内存占用</li><li>查询、新增、删除的效率</li></ul></li><li>如何保证 nextNode 不丢失</li></ul><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>思考：用数组和链表实现队列，哪个性能更好？</p>',22),d=[r];function c(n,h,s,p,_,u){return t(),a("div",null,d)}const f=e(l,[["render",c]]);export{m as __pageData,f as default};
