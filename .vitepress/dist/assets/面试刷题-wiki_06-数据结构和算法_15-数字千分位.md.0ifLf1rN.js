import{_ as a,c as e,o as i,a1 as t}from"./chunks/framework.BwTyoF0R.js";const f=JSON.parse('{"title":"数字千分位","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/15-数字千分位.md","filePath":"面试刷题-wiki/06-数据结构和算法/15-数字千分位.md"}'),l={name:"面试刷题-wiki/06-数据结构和算法/15-数字千分位.md"},o=t('<h1 id="数字千分位" tabindex="-1">数字千分位 <a class="header-anchor" href="#数字千分位" aria-label="Permalink to &quot;数字千分位&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>将数字按照千分位生成字符串，即每三位加一个逗号。不考虑小数。<br> 如输入数字 <code>78100200300</code> 返回字符串 <code>&#39;78,100,200,300&#39;</code></p><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><ul><li>使用数组</li><li>使用正则表达式</li><li>使用字符串拆分</li></ul><h2 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h2><ul><li>数组转换，影响性能</li><li>正则表达式，性能较差</li><li>操作字符串，性能较好</li></ul><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>方案二，参考 thousands-format.ts</p><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>从尾向头计算，和日常遍历的顺序相反</li><li>慎用数组操作</li><li>慎用正则表达式</li></ul>',11),r=[o];function h(n,d,s,c,_,u){return i(),e("div",null,r)}const p=a(l,[["render",h]]);export{f as __pageData,p as default};
