import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BwTyoF0R.js";const u=JSON.parse('{"title":"Vue-router 模式","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/09-知识深度/11-vue-router-模式.md","filePath":"面试刷题-wiki/09-知识深度/11-vue-router-模式.md"}'),t={name:"面试刷题-wiki/09-知识深度/11-vue-router-模式.md"},h=e(`<h1 id="vue-router-模式" tabindex="-1">Vue-router 模式 <a class="header-anchor" href="#vue-router-模式" aria-label="Permalink to &quot;Vue-router 模式&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>Vue-router 模式 <code>&#39;hash&#39; | &#39;history&#39; | &#39;abstract&#39;</code> 的区别</p><h2 id="v4-的升级" tabindex="-1">v4 的升级 <a class="header-anchor" href="#v4-的升级" aria-label="Permalink to &quot;v4 的升级&quot;">​</a></h2><p>Vue-router v4 升级之后，<code>mode: &#39;xxx&#39;</code> 替换为 API 的形式，但功能是一样的</p><ul><li><code>mode: &#39;hash&#39;</code> 替换为 <code>createWebHashHistory()</code></li><li><code>mode: &#39;history&#39;</code> 替换为 <code>createWebHistory()</code></li><li><code>mode: &#39;abstract&#39;</code> 替换为 <code>createMemoryHistory()</code></li></ul><p>PS：个人感觉，叫 <code>memory</code> 比叫 <code>abstract</code> 更易理解，前者顾名思义，后者就过于抽象。</p><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://127.0.0.1:8881/hash.html?a=100&amp;b=20#/aaa/bbb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.protocol </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;http:&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hostname </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.host </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;127.0.0.1:8881&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.port </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;8881&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.pathname </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/hash.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.search </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;?a=100&amp;b=20&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hash </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;#/aaa/bbb&#39;</span></span></code></pre></div><p>hash 的特点</p><ul><li>会触发页面跳转，可使用浏览器的“后退” “前进”</li><li>但不会刷新页面，支持 SPA 必须的特性</li><li>hash 不会被提交到 server 端（因此刷新页面也会命中当前页面，让前端根据 hash 处理路由）</li></ul><p>url 中的 hash ，是不会发送给 server 端的。前端 <code>onhashchange</code> 拿到自行处理。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面初次加载，获取 hash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location.hash)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hash 变化，包括：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a. JS 修改 url</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b. 手动修改 url 的 hash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c. 浏览器前进、后退</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onhashchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;old url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.oldURL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.newURL)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location.hash)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="h5-history-api" tabindex="-1">H5 history API <a class="header-anchor" href="#h5-history-api" aria-label="Permalink to &quot;H5 history API&quot;">​</a></h2><p>常用的两个 API</p><ul><li><code>history.pushState</code></li><li><code>window.onpopstate</code></li></ul><p>页面刷新时，<strong>服务端要做处理</strong>，可参考<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">文档</a>。。即无论什么 url 访问 server ，都要返回该页面。</p><p>按照 url 规范，不同的 url 对应不同的资源，例如：</p><ul><li><code>https://github.com/</code> server 返回首页</li><li><code>https://github.com/username/</code> server 返回用户页</li><li><code>https://github.com/username/project1/</code> server 返回项目页</li></ul><p>但是用了 SPA 的前端路由，就改变了这一规则，假如 github 用了的话：</p><ul><li><code>https://github.com/</code> server 返回首页</li><li><code>https://github.com/username/</code> server 返回首页，前端路由跳转到用户页</li><li><code>https://github.com/username/project1/</code> server 返回首页，前端路由跳转到项目页</li></ul><p>所以，从开发者的实现角度来看，前端路由是一个违反规则的形式。 但是从不关心后端，只关心前端页面的用户，或者浏览器来看，更喜欢 <code>pushState</code> 这种方式。</p><p>代码参考 history-api.html</p><h2 id="三种模式的区别" tabindex="-1">三种模式的区别 <a class="header-anchor" href="#三种模式的区别" aria-label="Permalink to &quot;三种模式的区别&quot;">​</a></h2><ul><li>hash - 使用 url hash 变化记录路由地址</li><li>history - 使用 H5 history API 来改 url 记录路由地址</li><li>abstract - 不修改 url ，路由地址在内存中，<strong>但页面刷新会重新回到首页</strong>。</li></ul><h2 id="连环问-react-router-有几种模式" tabindex="-1">连环问：react-router 有几种模式？ <a class="header-anchor" href="#连环问-react-router-有几种模式" aria-label="Permalink to &quot;连环问：react-router 有几种模式？&quot;">​</a></h2><p>react-router 有三种模式，设计上和 vue-router 一样</p><ul><li><a href="https://reactrouter.com/web/api/BrowserRouter" target="_blank" rel="noreferrer">browser history</a></li><li><a href="https://reactrouter.com/web/api/HashRouter" target="_blank" rel="noreferrer">hash history</a></li><li><a href="https://reactrouter.com/web/api/MemoryRouter" target="_blank" rel="noreferrer">memory history</a></li></ul>`,28),l=[h];function n(r,p,o,k,d,c){return a(),i("div",null,l)}const g=s(t,[["render",n]]);export{u as __pageData,g as default};
