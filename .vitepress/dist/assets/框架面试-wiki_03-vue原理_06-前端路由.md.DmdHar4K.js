import{_ as s,c as i,o as a,a1 as h}from"./chunks/framework.BwTyoF0R.js";const c=JSON.parse('{"title":"前端路由","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/03-vue原理/06-前端路由.md","filePath":"框架面试-wiki/03-vue原理/06-前端路由.md"}'),t={name:"框架面试-wiki/03-vue原理/06-前端路由.md"},n=h(`<h1 id="前端路由" tabindex="-1">前端路由 <a class="header-anchor" href="#前端路由" aria-label="Permalink to &quot;前端路由&quot;">​</a></h1><ul><li>hash</li><li>history API</li></ul><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><p>hash 是什么</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// http://127.0.0.1:8881/01-hash.html?a=100&amp;b=20#/aaa/bbb</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.protocol </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;http:&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hostname </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;127.0.0.1&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.host </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;127.0.0.1:8881&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.port </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;8881&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.pathname </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;/01-hash.html&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.search </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;?a=100&amp;b=20&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">location.hash </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;#/aaa/bbb&#39;</span></span></code></pre></div><p>hash 的特点，重要！！！</p><ul><li>会触发页面跳转，即可后退、前进</li><li>但不会刷新页面，支持 SPA 必须的特性</li><li>hash 不会被提交到 server 端（因此刷新页面也会命中当前页面，让前端根据 hash 处理路由）</li></ul><p>url 中的 hash ，是不会发送给 server 端的。前端 <code>onhashchange</code> 拿到自行处理。</p><p>onhashchange 监听 hash 变化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 页面初次加载，获取 hash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DOMContentLoaded&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location.hash)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hash 变化，包括：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a. JS 修改 url</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b. 手动修改 url 的 hash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// c. 浏览器前进、后退</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onhashchange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;old url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.oldURL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new url&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, event.newURL)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hash&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, location.hash)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="history-api" tabindex="-1">history API <a class="header-anchor" href="#history-api" aria-label="Permalink to &quot;history API&quot;">​</a></h2><p>常用的两个 API</p><ul><li>history.pushState</li><li>window.onpopstate</li></ul><p>页面刷新时，<strong>服务端要做处理</strong>。即无论什么 url 访问 server ，都要返回该页面。</p><p>需要 server 端配合，可参考 <a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html#%E5%90%8E%E7%AB%AF%E9%85%8D%E7%BD%AE%E4%BE%8B%E5%AD%90" target="_blank" rel="noreferrer">https://router.vuejs.org/zh/guide/essentials/history-mode.html#后端配置例子</a></p><p>按照 url 规范，不同的 url 对应不同的资源，例如：</p><ul><li><a href="https://github.com/" target="_blank" rel="noreferrer">https://github.com/</a> 首页</li><li><a href="https://github.com/username/" target="_blank" rel="noreferrer">https://github.com/username/</a> 用户页</li><li><a href="https://github.com/username/xxx/" target="_blank" rel="noreferrer">https://github.com/username/xxx/</a> 项目页</li></ul><p>但是用了 SPA 的前端路由，就改变了这一规则，假如 github 用了的话：</p><ul><li><a href="https://github.com/" target="_blank" rel="noreferrer">https://github.com/</a> 首页</li><li><a href="https://github.com/username/" target="_blank" rel="noreferrer">https://github.com/username/</a> 首页（前端处理路由）</li><li><a href="https://github.com/username/xxx/" target="_blank" rel="noreferrer">https://github.com/username/xxx/</a> 首页（前端处理路由）</li></ul><p>所以，从开发者的实现角度来看，前端路由是一个违反规则的形式。 但是从不关心后端，只关心前端页面的用户，或者浏览器来看，更喜欢 pushState 这种方式。</p><h2 id="如何选择" tabindex="-1">如何选择？ <a class="header-anchor" href="#如何选择" aria-label="Permalink to &quot;如何选择？&quot;">​</a></h2><ul><li>内部系统或 to B 的管理系统，用 hash 。简单易用，对 url 规范没有要求。</li><li>to C 的页面，用 history API ，对 url 规范和 SEO 要求较高。—— 但需要服务端配合</li></ul><h2 id="结合-vue-router" tabindex="-1">结合 vue-router <a class="header-anchor" href="#结合-vue-router" aria-label="Permalink to &quot;结合 vue-router&quot;">​</a></h2><p>vue-router 和 react-router 的路由原理</p>`,24),l=[n];function e(p,r,k,o,E,d){return a(),i("div",null,l)}const u=s(t,[["render",e]]);export{c as __pageData,u as default};
