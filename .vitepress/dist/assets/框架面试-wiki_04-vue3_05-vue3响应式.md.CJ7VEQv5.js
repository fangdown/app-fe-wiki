import{_ as i,c as s,o as a,a1 as e}from"./chunks/framework.BwTyoF0R.js";const y=JSON.parse('{"title":"vue3 响应式","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/04-vue3/05-vue3响应式.md","filePath":"框架面试-wiki/04-vue3/05-vue3响应式.md"}'),l={name:"框架面试-wiki/04-vue3/05-vue3响应式.md"},t=e(`<h1 id="vue3-响应式" tabindex="-1">vue3 响应式 <a class="header-anchor" href="#vue3-响应式" aria-label="Permalink to &quot;vue3 响应式&quot;">​</a></h1><h2 id="回顾-object-defineproperty" tabindex="-1">回顾 Object.defineProperty <a class="header-anchor" href="#回顾-object-defineproperty" aria-label="Permalink to &quot;回顾 Object.defineProperty&quot;">​</a></h2><p>基本用法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Object.defineProperty 的基本用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhangsan&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;set&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newVal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 测试</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data.name)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以监听到</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lisi&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 可以监听到</span></span></code></pre></div><p>监听数据变化，参考 <code>code-1.js</code></p><p>总结 Object.defineProperty 缺点：</p><ul><li>深度监听，需要递归到底</li><li>无法监听新增属性/删除属性（Vue.set Vue.delete）</li><li>无法监听数组，需要特殊处理</li></ul><h2 id="使用-proxy" tabindex="-1">使用 Proxy <a class="header-anchor" href="#使用-proxy" aria-label="Permalink to &quot;使用 Proxy&quot;">​</a></h2><p>我们已知：</p><ul><li>Proxy 可以原生监听 新增/删除属性</li><li>Proxy 原生支持监听数组变化</li></ul><p>接下来看看 Proxy 如何实现深度监听。参考 <code>code-2.js</code></p><h2 id="两者对比" tabindex="-1">两者对比 <a class="header-anchor" href="#两者对比" aria-label="Permalink to &quot;两者对比&quot;">​</a></h2><ul><li>深度监听，都用递归。但前者是一次性递归，后者是访问时再递归。</li><li>Proxy 原生能监听 新增/删除属性</li><li>Proxy 原生支持监听数组变化</li></ul><p>但 —— <strong>Proxy 兼容性不好</strong> ，我见过，oppo vivo 的某些机型，某些 app 的 webview 还没有支持 ES6 。</p><h2 id="vue3-响应式实现" tabindex="-1">vue3 响应式实现 <a class="header-anchor" href="#vue3-响应式实现" aria-label="Permalink to &quot;vue3 响应式实现&quot;">​</a></h2><p>响应式的作用：<strong>监听 data 数据变化</strong>，仅此而已。所以，不要掺杂进其他功能进来。</p><h3 id="回顾" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h3><ul><li>回顾 Object.defineProperty 方式</li><li>回归 Proxy 语法</li><li>回顾 Map 和 Set 语法</li></ul><h3 id="proxy-实现" tabindex="-1">Proxy 实现 <a class="header-anchor" href="#proxy-实现" aria-label="Permalink to &quot;Proxy 实现&quot;">​</a></h3><p>用 Proxy 模仿 Vue 3.0 的响应式</p><p>学习用法</p><ul><li>下载 vue-next ，然后查看测试用例，看 <code>packages/reactivity/__tests__/effect.spec.ts</code></li><li>找 <code>basic properties</code> ，找到使用方式</li></ul><p>源码编写，步骤如下</p><ul><li><code>reactivity-1.js</code> 实现简单的 Proxy 监听</li><li><code>reactivity-2.js</code> 深度监听，修改 <code>get</code> 的代码</li><li><code>reactivity-3.js</code> 监听数组，修改 <code>get</code> 去掉原型方法，修改 <code>set</code> 区分新增属性和修改属性，不重复修改属性</li><li><code>reactivity-4.js</code> 避免重复代理 <ul><li>新建 <code>toProxyMap</code> 和 <code>toRawMap</code></li><li><code>createReactiveObject</code> 中 <ul><li>创建 proxy 之前，判断 <code>toProxyMap</code> 是否有对应的 proxy</li><li>创建 Proxy 之前，判断 <code>toRawMap</code> 是否已有对应的 proxy</li><li>生成 proxy 之后，设置 <code>toProxyMap</code></li><li>生成 proxy 之后，设置 <code>toRawMap</code></li></ul></li></ul></li><li><code>reactivity-5.js</code> 接收副作用，<strong>先初始化时能执行一次</strong>。创建 <code>effect</code> <code>createReactiveEffect</code> <code>run</code> 和 <code>activeEffectStacks</code></li><li><code>reactivity-6.js</code> 响应式副作用 <ul><li>新建 <code>targetsMap</code></li><li>新建 <code>track</code> 函数，并在 <code>get</code> 时执行</li><li>新建 <code>trigger</code> 函数，并在 <code>set</code> 时执行</li></ul></li></ul><p>总结 Proxy 比 Object.defineProperty 的优点？</p><ul><li>深度监听时，Proxy 延迟递归，而不是一上来就全部递归，性能好</li><li>原生支持监听数组</li><li>原生支持新增和删除属性</li></ul>`,26),n=[t];function p(h,o,r,k,d,c){return a(),s("div",null,n)}const g=i(l,[["render",p]]);export{y as __pageData,g as default};
