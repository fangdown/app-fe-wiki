import{_ as t,c as a,o as e,a1 as o}from"./chunks/framework.BwTyoF0R.js";const l="/assets/dom-tree.C0h17umK.png",m=JSON.parse('{"title":"遍历 DOM 树","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/01-编写高质量代码/05-遍历DOM树.md","filePath":"面试刷题-wiki/01-编写高质量代码/05-遍历DOM树.md"}'),r={name:"面试刷题-wiki/01-编写高质量代码/05-遍历DOM树.md"},i=o('<h1 id="遍历-dom-树" tabindex="-1">遍历 DOM 树 <a class="header-anchor" href="#遍历-dom-树" aria-label="Permalink to &quot;遍历 DOM 树&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>写一个函数遍历 DOM 树，分别用深度优先和广度优先</p><p>PS：注意回顾 “Node 和 Element 和区别”</p><h2 id="深度优先-vs-广度优先" tabindex="-1">深度优先 vs 广度优先 <a class="header-anchor" href="#深度优先-vs-广度优先" aria-label="Permalink to &quot;深度优先 vs 广度优先&quot;">​</a></h2><p><img src="'+l+'" alt=""></p><p>深度优先的结果 <code>&lt;div&gt; &lt;p&gt; &quot;hello&quot; &lt;b&gt; &quot;world&quot; &lt;img&gt; 注释 &lt;ul&gt; &lt;li&gt; &quot;a&quot; &lt;li&gt; &quot;b&quot;</code></p><p>广度优先的结果 <code>&lt;div&gt; &lt;p&gt; &lt;img&gt; 注释 &lt;ul&gt; &quot;hello&quot; &lt;b&gt; &lt;li&gt; &lt;li&gt; &quot;world&quot; &quot;a&quot; &quot;b&quot;</code></p><h2 id="深度优先" tabindex="-1">深度优先 <a class="header-anchor" href="#深度优先" aria-label="Permalink to &quot;深度优先&quot;">​</a></h2><p>一般通过递归实现，代码参考 dom-traverse.ts</p><h2 id="广度优先" tabindex="-1">广度优先 <a class="header-anchor" href="#广度优先" aria-label="Permalink to &quot;广度优先&quot;">​</a></h2><p>一般通过队列实现，代码参考 dom-traverse.ts</p><h2 id="解答" tabindex="-1">解答 <a class="header-anchor" href="#解答" aria-label="Permalink to &quot;解答&quot;">​</a></h2><ul><li>深度优先，递归</li><li>广度优先，队列</li></ul><h2 id="连环问-深度优先可以不用递归吗" tabindex="-1">连环问：深度优先可以不用递归吗？ <a class="header-anchor" href="#连环问-深度优先可以不用递归吗" aria-label="Permalink to &quot;连环问：深度优先可以不用递归吗？&quot;">​</a></h2><p>深度优先遍历，可以使用栈代替递归，递归本质上就是栈。代码参考 dom-traverse.ts</p><p>递归和非递归哪个更好？</p><ul><li>递归逻辑更加清晰，但容易出现 <code>stack overflow</code> 错误（可使用<code>尾递归</code>，编译器有优化）</li><li>非递归效率更高，但使用栈，逻辑稍微复杂一些</li></ul>',18),d=[i];function s(c,h,n,u,_,p){return e(),a("div",null,d)}const g=t(r,[["render",s]]);export{m as __pageData,g as default};
