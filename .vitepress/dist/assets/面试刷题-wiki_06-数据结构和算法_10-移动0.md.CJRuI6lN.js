import{_ as e,c as o,o as a,a1 as l}from"./chunks/framework.BwTyoF0R.js";const f=JSON.parse('{"title":"移动 0","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/10-移动0.md","filePath":"面试刷题-wiki/06-数据结构和算法/10-移动0.md"}'),i={name:"面试刷题-wiki/06-数据结构和算法/10-移动0.md"},c=l('<h1 id="移动-0" tabindex="-1">移动 0 <a class="header-anchor" href="#移动-0" aria-label="Permalink to &quot;移动 0&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>定义一个函数，将数组种所有的 <code>0</code> 都移动到末尾，例如输入 <code>[1, 0, 3, 0, 11, 0]</code> 输出 <code>[1, 3, 11, 0, 0, 0]</code>。要求：</p><ul><li>只移动 <code>0</code> ，其他数字顺序不变</li><li>考虑时间复杂度</li><li>必须在原数组就行操作</li></ul><h2 id="如果不限制-必须在原数组修改" tabindex="-1">如果不限制“必须在原数组修改” <a class="header-anchor" href="#如果不限制-必须在原数组修改" aria-label="Permalink to &quot;如果不限制“必须在原数组修改”&quot;">​</a></h2><ul><li>定义 <code>part1</code> <code>part2</code> 两个空数组</li><li>遍历数组，非 <code>0</code> push 到 <code>part1</code> ，<code>0</code> push 到 <code>part2</code></li><li>返回 <code>part1.concat(part2)</code></li></ul><p>时间复杂度 <code>O(n)</code> 空间复杂度 <code>O(n)</code> ，</p><p>所以，遇到类似问题，要提前问面试官：<strong>是否能在原数组基础上修改？</strong></p><h2 id="传统方式" tabindex="-1">传统方式 <a class="header-anchor" href="#传统方式" aria-label="Permalink to &quot;传统方式&quot;">​</a></h2><p>思路</p><ul><li>遍历数组</li><li>遇到 <code>0</code> 则 push 到数组末尾</li><li>然后用 splice 截取掉当前元素</li></ul><p>分析性能</p><ul><li>空间复杂度没有问题 <code>O(1)</code></li><li>时间复杂度 <ul><li>看似是 <code>O(n)</code></li><li>但实际上 <code>splice</code> 和 <code>unshift</code> 一样，修改数组结构，时间复杂度是 <code>O(n)</code></li><li>总体看来时间复杂度是 <code>O(n^2)</code>，不可用</li></ul></li></ul><p>【注意】网上有很多人对这种方式点赞，切不可随意从众，要对思考！</p><h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">​</a></h2><p>思路（可画图解释，参考视频讲解）</p><ul><li>指针1 指向第一个 0 ，指针2 指向第一个非 0</li><li>把指针1 和 指针2 进行交换</li><li>指针向后移</li></ul><p>性能分析</p><ul><li>时间复杂度 <code>O(n)</code></li><li>空间复杂度 <code>O(1)</code></li></ul><p>性能测试，实际对比差距非常大。</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>使用双指针，保证时间复杂度。参考 move-zero.ts</p><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>咨询面试官，确认是否必须要修改原数据？</li><li>数组是有序结构，不能随意 <code>splice</code> <code>unshift</code></li><li>双指针的思路</li></ul>',24),d=[c];function t(r,n,h,s,p,u){return a(),o("div",null,d)}const m=e(i,[["render",t]]);export{f as __pageData,m as default};
