import{_ as t,c as a,o as i,a1 as l}from"./chunks/framework.BwTyoF0R.js";const x=JSON.parse('{"title":"http 状态码","description":"","frontmatter":{},"headers":[],"relativePath":"基础面试-wiki/12-升级-http面试题/02-http状态码.md","filePath":"基础面试-wiki/12-升级-http面试题/02-http状态码.md"}'),e={name:"基础面试-wiki/12-升级-http面试题/02-http状态码.md"},o=l('<h1 id="http-状态码" tabindex="-1">http 状态码 <a class="header-anchor" href="#http-状态码" aria-label="Permalink to &quot;http 状态码&quot;">​</a></h1><p>注意，无论是状态码规范，还是整个 http 协议规范，都是前后端的一个<strong>约定</strong>，需要大家都来遵守。 所谓约定或者规范，不是强制的，你可以不遵守。 但是如果大家都遵守，你特立独行，就会慢慢的被孤立。就像早期的 IE 浏览器。</p><p>所以，无论是这里的 http 协议，还是开发中其他的事情。我们都要尽量去遵守业界的规范，参照业界的标准 —— <strong>当然，前提是你得知道有哪些规范（知识体系的范围）</strong></p><h2 id="状态码分类" tabindex="-1">状态码分类 <a class="header-anchor" href="#状态码分类" aria-label="Permalink to &quot;状态码分类&quot;">​</a></h2><ul><li>1xx 服务器收到请求</li><li>2xx 成功</li><li>3xx 重定向</li><li>4xx 客户端错误</li><li>5xx 服务器错误</li></ul><h2 id="常见状态码" tabindex="-1">常见状态码 <a class="header-anchor" href="#常见状态码" aria-label="Permalink to &quot;常见状态码&quot;">​</a></h2><p>http 协议中的状态码有很多，但只有一些是我们常用的。也是面试常考的。</p><ul><li>200 成功</li><li>301 永久重定向（同时返回一个 location ，写明重定向的 url）。例如一个网站的网址永久性的切换了</li><li>302 临时重定向（同时返回一个 location ，写明重定向的 url）。例如短链跳转</li><li>304 资源未修改过</li><li>404 未找到资源</li><li>403 没有权限，例如需要登录之后才能请求</li><li>500 服务器内部错误，例如服务器代码异常</li><li>504 网关超时，例如上游服务器连接失败（服务器不是一台机器，可能会有很多台）</li></ul><h2 id="仅仅是一个规定" tabindex="-1">仅仅是一个规定 <a class="header-anchor" href="#仅仅是一个规定" aria-label="Permalink to &quot;仅仅是一个规定&quot;">​</a></h2><p>再次强调一下，这些状态码仅仅是一个规定。所以前端后端，都要自觉遵守这个规定。</p>',10),r=[o];function h(n,p,s,_,c,d){return i(),a("div",null,r)}const m=t(e,[["render",h]]);export{x as __pageData,m as default};
