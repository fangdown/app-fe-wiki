import{_ as a,c as e,o as t,a1 as o}from"./chunks/framework.BwTyoF0R.js";const f=JSON.parse('{"title":"小数相加","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/17-小数相加.md","filePath":"面试刷题-wiki/06-数据结构和算法/17-小数相加.md"}'),r={name:"面试刷题-wiki/06-数据结构和算法/17-小数相加.md"},c=o('<h1 id="小数相加" tabindex="-1">小数相加 <a class="header-anchor" href="#小数相加" aria-label="Permalink to &quot;小数相加&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>为何 <code>0.1 + 0.2 !== 0.3</code></p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>计算机用二进制存储数据。</p><p>整数用二进制没有误差，如 <code>9</code> 表示为 <code>1001</code> 。<br> 而有的小数无法用二进制表示，如 <code>0.2</code> 用二进制表示就是 <code>1.10011001100...</code></p><p>所以，累加小数时会出现误差。<br> 这不仅仅是 JS ，所有的计算机语言都这样。</p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展&quot;">​</a></h2><p>可以使用第三方库 <a href="https://www.npmjs.com/package/mathjs" target="_blank" rel="noreferrer">https://www.npmjs.com/package/mathjs</a></p>',9),d=[c];function i(s,n,_,h,l,p){return t(),e("div",null,d)}const u=a(r,[["render",i]]);export{f as __pageData,u as default};
