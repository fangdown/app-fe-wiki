import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BwTyoF0R.js";const E=JSON.parse('{"title":"wepback","description":"","frontmatter":{},"headers":[],"relativePath":"基础面试-wiki/04-开发环境/05-webpack.md","filePath":"基础面试-wiki/04-开发环境/05-webpack.md"}'),l={name:"基础面试-wiki/04-开发环境/05-webpack.md"},n=e(`<h1 id="wepback" tabindex="-1">wepback <a class="header-anchor" href="#wepback" aria-label="Permalink to &quot;wepback&quot;">​</a></h1><p>参考 <a href="https://www.imooc.com/article/287156" target="_blank" rel="noreferrer">https://www.imooc.com/article/287156</a></p><p>【注意】webpack 功能非常强大，内容非常多，本节只讲一些最常见的应用</p><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><ul><li><code>npm init -y</code></li><li><code>npm i webpack webpack-cli -D</code></li><li>新建 <code>src/index.js</code>，随便写点什么</li><li>新建 <code>webpack.config.js</code> 配置 <code>mode</code> <code>entry</code> <code>output</code></li><li>package.json 中增加 <code>&quot;build&quot;: &quot;webpack&quot;</code></li><li>运行 <code>npm run build</code></li></ul><h2 id="启动服务" tabindex="-1">启动服务 <a class="header-anchor" href="#启动服务" aria-label="Permalink to &quot;启动服务&quot;">​</a></h2><ul><li><code>npm i html-webpack-plugin -D</code> ，并引用、配置插件</li><li>新建 <code>src/index.html</code></li><li><code>npm i webpack-dev-server -D</code> ，并引用、配置</li><li>package.json 中增减 <code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code></li><li>运行 <code>npm run dev</code></li></ul><h2 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;babel&quot;">​</a></h2><p>ES6 编译为 ES5</p><ul><li><code>npm i babel-loader @babel/core @babel/preset-env -D</code></li><li>增加 babel-loader 配置</li><li>增加 <code>.babelrc</code> 文件</li><li>在 <code>src/index.js</code> 中增加一个箭头函数和 <code>class</code>，看打包结果</li></ul><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><p>webpack4 默认支持 ES6 Module</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个一个导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一块导出</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意这里不能有 default ！！！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fn,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="打包到生产环境" tabindex="-1">打包到生产环境 <a class="header-anchor" href="#打包到生产环境" aria-label="Permalink to &quot;打包到生产环境&quot;">​</a></h2><ul><li>新建 <code>webpack.prod.js</code> ，注意 <code>mode: &#39;production&#39;</code></li><li>加上 <code>contentHash</code></li><li>修改 package.json <code>&quot;build&quot;: &quot;webpack --config webpack.prod.js&quot;,</code></li><li>运行 <code>npm run build</code> ，看打包出来的代码是被压缩过的</li></ul>`,16),t=[n];function p(h,o,c,d,k,r){return a(),i("div",null,t)}const u=s(l,[["render",p]]);export{E as __pageData,u as default};
