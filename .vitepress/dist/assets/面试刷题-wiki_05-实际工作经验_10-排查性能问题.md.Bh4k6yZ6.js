import{_ as a,c as e,o as t,a1 as i}from"./chunks/framework.BwTyoF0R.js";const s="/assets/performance.CY7E4NBX.png",n="/assets/network.DupVDrQg.png",l="/assets/lighthouse-performance.Bal1u0Im.png",o="/assets/lighthouse-sug.CeQ9esJk.png",r="/assets/github-performance.DUeLBe4h.png",b=JSON.parse('{"title":"排查性能问题","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/05-实际工作经验/10-排查性能问题.md","filePath":"面试刷题-wiki/05-实际工作经验/10-排查性能问题.md"}'),h={name:"面试刷题-wiki/05-实际工作经验/10-排查性能问题.md"},p=i('<h1 id="排查性能问题" tabindex="-1">排查性能问题 <a class="header-anchor" href="#排查性能问题" aria-label="Permalink to &quot;排查性能问题&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>如果一个 h5 很慢，你该如何排查问题？</p><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>注意审题，看面试官问的是哪方面的慢。如果他没有说清楚，你可以继续追问一下。</p><ul><li>加载速度慢。则考虑网页文件、数据请求的优化，即本文所讲</li><li>运行卡顿，体验不流畅。则考虑内存泄漏、节流防抖、重绘重排的方面，此前面试题已经讲过</li></ul><h2 id="前端性能指标" tabindex="-1">前端性能指标 <a class="header-anchor" href="#前端性能指标" aria-label="Permalink to &quot;前端性能指标&quot;">​</a></h2><p>能搜索到的性能指标非常多，也有很多非标准的指标。最常用的指标有如下几个：</p><h3 id="first-paint-fp" tabindex="-1">First Paint (FP) <a class="header-anchor" href="#first-paint-fp" aria-label="Permalink to &quot;First Paint (FP)&quot;">​</a></h3><p>从开始加载到浏览器<strong>首次绘制像素</strong>到屏幕上的时间，也就是页面在屏幕上首次发生视觉变化的时间。但此变化可能是简单的背景色更新或不引人注意的内容，它并不表示页面内容完整性，可能会报告没有任何可见的内容被绘制的时间。</p><h3 id="first-contentful-paint-fcp" tabindex="-1">First Contentful Paint（FCP） <a class="header-anchor" href="#first-contentful-paint-fcp" aria-label="Permalink to &quot;First Contentful Paint（FCP）&quot;">​</a></h3><p>浏览器<strong>首次绘制来自 DOM 的内容</strong>的时间，内容必须是文本、图片（包含背景图）、非白色的 canvas 或 SVG，也包括带有正在加载中的 Web 字体的文本。</p><h3 id="first-meaningful-paint-fmp" tabindex="-1">First Meaningful Paint（FMP） <a class="header-anchor" href="#first-meaningful-paint-fmp" aria-label="Permalink to &quot;First Meaningful Paint（FMP）&quot;">​</a></h3><p>页面的<strong>主要内容</strong>绘制到屏幕上的时间。这是一个更好的衡量用户感知加载体验的指标，但无法统一衡量，因为每个页面的主要内容都不太一致。<br> 主流的分析工具都已弃用 FMP 而使用 LCP</p><h3 id="domcontentloaded-dcl" tabindex="-1">DomContentLoaded（DCL） <a class="header-anchor" href="#domcontentloaded-dcl" aria-label="Permalink to &quot;DomContentLoaded（DCL）&quot;">​</a></h3><p>即 <code>DOMContentLoaded</code> 触发时间，DOM 全部解析并渲染完。</p><h3 id="largest-contentful-paint-lcp" tabindex="-1">Largest Contentful Paint（LCP） <a class="header-anchor" href="#largest-contentful-paint-lcp" aria-label="Permalink to &quot;Largest Contentful Paint（LCP）&quot;">​</a></h3><p><strong>可视区域中最大的内容元素</strong>呈现到屏幕上的时间，用以估算页面的主要内容对用户可见时间。</p><h3 id="load-l" tabindex="-1">Load（L） <a class="header-anchor" href="#load-l" aria-label="Permalink to &quot;Load（L）&quot;">​</a></h3><p>即 <code>window.onload</code> 触发时间，页面内容（包括图片）全部加载完成。</p><h2 id="性能分析工具-chrome-devtools" tabindex="-1">性能分析工具 - Chrome devtools <a class="header-anchor" href="#性能分析工具-chrome-devtools" aria-label="Permalink to &quot;性能分析工具 - Chrome devtools&quot;">​</a></h2><p>PS：建议在 Chrome 隐身模式测试，避免其他缓存的干扰。</p><p>Performance 可以检测到上述的性能指标，并且有网页快照截图。</p><p><img src="'+s+'" alt=""></p><p>NetWork 可以看到各个资源的加载时间</p><p><img src="'+n+`" alt=""></p><h2 id="性能分析工具-lighthouse" tabindex="-1">性能分析工具 - Lighthouse <a class="header-anchor" href="#性能分析工具-lighthouse" aria-label="Permalink to &quot;性能分析工具 - Lighthouse&quot;">​</a></h2><p><a href="https://www.npmjs.com/package/lighthouse" target="_blank" rel="noreferrer">Lighthouse</a> 是非常优秀的第三方性能评测工具，支持移动端和 PC 端。 它支持 Chrome 插件和 npm 安装，国内情况推荐使用后者。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lighthouse</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 检测一个网页，检测完毕之后会打开一个报告网页</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lighthouse</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://imooc.com/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --view</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --preset=desktop</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 或者 mobile</span></span></code></pre></div><p>测试完成之后，lighthouse 给出测试报告</p><p><img src="`+l+'" alt=""></p><p>并且会给出一些优化建议</p><p><img src="'+o+'" alt=""></p><h2 id="识别问题" tabindex="-1">识别问题 <a class="header-anchor" href="#识别问题" aria-label="Permalink to &quot;识别问题&quot;">​</a></h2><p>网页慢，到底是加载慢，还是渲染慢？—— 分清楚很重要，因为前后端不同负责。</p><p>如下图是 github 的性能分析，很明显这是加载慢，渲染很快。</p><p><img src="'+r+'" alt=""></p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>加载慢</p><ul><li>优化服务端接口</li><li>使用 CDN</li><li>压缩文件</li><li>拆包，异步加载</li></ul><p>渲染慢（可参考“首屏优化”）</p><ul><li>根据业务功能，继续打点监控</li><li>如果是 SPA 异步加载资源，需要特别关注网络请求的时间</li></ul><h2 id="持续跟进" tabindex="-1">持续跟进 <a class="header-anchor" href="#持续跟进" aria-label="Permalink to &quot;持续跟进&quot;">​</a></h2><p>分析、解决、测试，都是在你本地进行，网站其他用户的情况你看不到。 所以要增加性能统计，看全局，不只看自己。</p><p>JS 中有 Performance API 可供获取网页的各项性能数据，对于性能统计非常重要。 如 <code>performance.timing</code> 可以获取网页加载各个阶段的时间戳。</p><p>如果你的公司没有内部的统计服务（一般只有大厂有），没必要自研，成本太高了。可以使用第三方的统计服务，例如阿里云 ARMS 。</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><ul><li>通过工具分析性能参数</li><li>识别问题：加载慢？渲染慢？</li><li>解决问题</li><li>增加性能统计，持续跟进、优化</li></ul>',48),d=[p];function c(u,m,g,k,f,_){return t(),e("div",null,d)}const C=a(h,[["render",c]]);export{b as __pageData,C as default};
