import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BwTyoF0R.js";const u=JSON.parse('{"title":"解答-6","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/11-升级Vue3.0/07-解答-6.md","filePath":"框架面试-wiki/11-升级Vue3.0/07-解答-6.md"}'),t={name:"框架面试-wiki/11-升级Vue3.0/07-解答-6.md"},l=e(`<h1 id="解答-6" tabindex="-1">解答-6 <a class="header-anchor" href="#解答-6" aria-label="Permalink to &quot;解答-6&quot;">​</a></h1><h2 id="vite-是什么" tabindex="-1">Vite 是什么？ <a class="header-anchor" href="#vite-是什么" aria-label="Permalink to &quot;Vite 是什么？&quot;">​</a></h2><p><a href="https://v3.cn.vuejs.org/guide/installation.html#vite" target="_blank" rel="noreferrer">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><ul><li><p>一个打包工具，Vue 作者发起的</p></li><li><p>借助 Vue 的影响力，和 webpack 竞争</p></li><li><p>优势：开发环境启动快，无需打包</p></li><li><p>开发环境基于 ES6 module <a href="https://www.caniuse.com/?search=module" target="_blank" rel="noreferrer">https://www.caniuse.com/?search=module</a></p></li><li><p>生产环境打包时使用 rollup</p></li></ul><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./src/add.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;add res&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, res)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="和-react-hooks-对比" tabindex="-1">和 React Hooks 对比 <a class="header-anchor" href="#和-react-hooks-对比" aria-label="Permalink to &quot;和 React Hooks 对比&quot;">​</a></h2><p>PS：这个题目需要你了解 React Hooks ，不了解的，可以先去看看（课程里有讲解），再回来学习。</p><ul><li>组件生命周期中 <code>setup</code> 只调用一次，而 React Hooks 在组件 render 和每次 update 时都会被调用</li><li>无需使用 <code>useMemo</code> <code>useCallback</code></li><li>“不需要顾虑调用顺序，也可以用在条件语句中” （React Hooks 的 <code>useXXX</code> 则有严格规定，这一点是 React Hooks 不太简单的地方）</li><li>（后两个，都是依赖于第一个特性的）</li></ul><p>另外，reactive ref 这俩概念，和 react Hooks 的 useState 相比，还是后者好理解</p>`,9),n=[l];function h(p,k,r,o,d,c){return a(),i("div",null,n)}const g=s(t,[["render",h]]);export{u as __pageData,g as default};
