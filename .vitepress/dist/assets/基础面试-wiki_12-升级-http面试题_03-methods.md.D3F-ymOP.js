import{_ as t,c as e,o as l,a1 as i}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"http methods","description":"","frontmatter":{},"headers":[],"relativePath":"基础面试-wiki/12-升级-http面试题/03-methods.md","filePath":"基础面试-wiki/12-升级-http面试题/03-methods.md"}'),o={name:"基础面试-wiki/12-升级-http面试题/03-methods.md"},a=i('<h1 id="http-methods" tabindex="-1">http methods <a class="header-anchor" href="#http-methods" aria-label="Permalink to &quot;http methods&quot;">​</a></h1><h2 id="常用-methods" tabindex="-1">常用 methods <a class="header-anchor" href="#常用-methods" aria-label="Permalink to &quot;常用 methods&quot;">​</a></h2><p>之前，常用的方法就是 get 和 post</p><ul><li>get 从服务端获取数据</li><li>post 向服务端提交数据</li></ul><p>现在，随着技术更新，以及 Restful API 设计（下文会讲）。有更多的 methods 被应用</p><ul><li>get 获取数据</li><li>post 新建数据</li><li>patch/put 更新数据</li><li>delete 删除数据</li></ul><h2 id="restful-api" tabindex="-1">Restful API <a class="header-anchor" href="#restful-api" aria-label="Permalink to &quot;Restful API&quot;">​</a></h2><p>Restful API 是前后端接口的一种设计规范，经历了几年的发展，已经被全面应用。前端面试常考。</p><ul><li>传统 API 设计：把每个 API 当做一个功能</li><li>Restful API 设计：把每个 API 当做一个资源标识</li></ul><p>需要用到的手段</p><ul><li>不使用 url 参数</li><li>使用 method 表示操作类型</li></ul><p>例如要获取一个列表</p><ul><li>（不使用 url 参数）</li><li>传统 API 设计：<code>/api/list?pageIndex=2</code> —— 一个功能</li><li>Restful API 设计：<code>/api/list/2</code> —— 一个资源</li></ul><p>再例如要操作一个数据</p><ul><li>传统 API 设计（每个 API 都是功能） <ul><li><code>/api/create-blog</code> ，post 请求</li><li><code>/api/udpate-blog?id=101</code>，post 请求</li><li><code>/api/get-blog?id=101</code>， get 请求</li></ul></li><li>Restful API 设计（每个 API 都是资源） <ul><li><code>/api/blog</code> ，post 请求</li><li><code>/api/blog/101</code> ，patch 请求</li><li><code>/api/blog/101</code> ，get 请求</li></ul></li></ul>',15),d=[a];function s(p,h,c,u,r,n){return l(),e("div",null,d)}const P=t(o,[["render",s]]);export{m as __pageData,P as default};
