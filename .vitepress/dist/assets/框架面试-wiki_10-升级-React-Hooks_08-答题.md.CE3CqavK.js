import{_ as o,c as a,o as e,a1 as t}from"./chunks/framework.BwTyoF0R.js";const _=JSON.parse('{"title":"答题","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/10-升级-React-Hooks/08-答题.md","filePath":"框架面试-wiki/10-升级-React-Hooks/08-答题.md"}'),l={name:"框架面试-wiki/10-升级-React-Hooks/08-答题.md"},i=t('<h1 id="答题" tabindex="-1">答题 <a class="header-anchor" href="#答题" aria-label="Permalink to &quot;答题&quot;">​</a></h1><p>（可以先回顾一下本章学习的所有知识点）</p><ul><li>为什么要使用 React Hooks？解决了什么问题</li><li>React Hooks 如何模拟组件生命周期</li><li>如何自定义 Hook</li><li>React Hooks 性能优化</li><li>React Hooks 有哪些坑？</li></ul><h2 id="为何要使用-hooks" tabindex="-1">为何要使用 Hooks <a class="header-anchor" href="#为何要使用-hooks" aria-label="Permalink to &quot;为何要使用 Hooks&quot;">​</a></h2><ul><li>组件公共逻辑复用，Hooks 更好</li><li>完善函数组件的能力（class 写组件是一个很费解的事情，以及 class 里的 this 也是初学者捉摸不透）</li><li>class 复杂组件正在变的难以理解</li></ul><p>class 组件变的复杂是，相同的逻辑，分散到各个地方：</p><ul><li>DidMount 和 DidUpdate 中获取数据</li><li>DidMount 绑定事件， WillUnMount 解绑</li><li>使用 Hooks ，可以把相同逻辑放在一个 useEffect 中 （这样就按照逻辑拆分出一个一个的小模块，甚至是一个一个自定义的 Hook）</li></ul><h2 id="react-hooks-如何模拟组件生命周期" tabindex="-1">React Hooks 如何模拟组件生命周期 <a class="header-anchor" href="#react-hooks-如何模拟组件生命周期" aria-label="Permalink to &quot;React Hooks 如何模拟组件生命周期&quot;">​</a></h2><p>主要的几个生命周期</p><ul><li>ComponentDidMount - useEffect 依赖是 []</li><li>ComponentDidUpdate - useEffect 依赖是 [a, b]</li><li>ComponentDid - useEffect 返回一个函数</li></ul><h2 id="如何自定义-hook" tabindex="-1">如何自定义 Hook <a class="header-anchor" href="#如何自定义-hook" aria-label="Permalink to &quot;如何自定义 Hook&quot;">​</a></h2><p>参考之前 ppt</p><h2 id="react-hooks-性能优化" tabindex="-1">React Hooks 性能优化 <a class="header-anchor" href="#react-hooks-性能优化" aria-label="Permalink to &quot;React Hooks 性能优化&quot;">​</a></h2><ul><li>useMemo 缓存数据</li><li>useCallback 缓存函数</li><li>配合 memo（相当于 SCU 和 PureComponent）</li></ul><h2 id="react-hooks-有哪些坑" tabindex="-1">React Hooks 有哪些坑 <a class="header-anchor" href="#react-hooks-有哪些坑" aria-label="Permalink to &quot;React Hooks 有哪些坑&quot;">​</a></h2><p>看你是否在实战中用过 Hooks ，还是仅仅看了一些文档</p><ul><li>useState 的值，只有第一次有效</li><li>useEffect 内部不能修改 state</li><li>useEffect 死循环</li></ul><p>【注意】坑可能还有其他的很多，但你说出这三个，至少证明你只真正用过 Hooks 的，面试官也不会过于为难你</p>',18),s=[i];function c(r,n,h,k,u,d){return e(),a("div",null,s)}const f=o(l,[["render",c]]);export{_ as __pageData,f as default};
