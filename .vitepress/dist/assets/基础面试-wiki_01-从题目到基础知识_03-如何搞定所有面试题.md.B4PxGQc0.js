import{_ as a,c as o,o as e,a1 as t}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"如何搞定所有面试题","description":"","frontmatter":{},"headers":[],"relativePath":"基础面试-wiki/01-从题目到基础知识/03-如何搞定所有面试题.md","filePath":"基础面试-wiki/01-从题目到基础知识/03-如何搞定所有面试题.md"}'),r={name:"基础面试-wiki/01-从题目到基础知识/03-如何搞定所有面试题.md"},n=t('<h1 id="如何搞定所有面试题" tabindex="-1">如何搞定所有面试题 <a class="header-anchor" href="#如何搞定所有面试题" aria-label="Permalink to &quot;如何搞定所有面试题&quot;">​</a></h1><hr><h2 id="思考的解答" tabindex="-1">思考的解答 <a class="header-anchor" href="#思考的解答" aria-label="Permalink to &quot;思考的解答&quot;">​</a></h2><p>对上一节的思考，做一下解答。</p><ul><li><strong>拿到一个面试题，你第一时间看到的是什么？</strong>—— 应该是知识点，这道题的考点，面试官出这道题，到底想考你什么。</li><li><strong>又如何看待网上搜出来的永远也看不完的题海？</strong>—— 以不变应万变，看那些题目考察的知识点是什么？题可以千变万化，但是知识点就这么多</li><li><strong>如何对待接下来的面试题？</strong>—— 先通过已有的题目，捋出前端考察的所有知识点（即本教程），然后再拿着这些知识点，去对应接下来的面试题。</li></ul><hr><h2 id="题目的知识点" tabindex="-1">题目的知识点 <a class="header-anchor" href="#题目的知识点" aria-label="Permalink to &quot;题目的知识点&quot;">​</a></h2><p>然后，我们把上一节每个题目考察的知识点总结一下，要核心知识点，牵强附会的先不管</p><h3 id="js中使用typeof能得到的哪些类型" tabindex="-1">JS中使用<code>typeof</code>能得到的哪些类型 <a class="header-anchor" href="#js中使用typeof能得到的哪些类型" aria-label="Permalink to &quot;JS中使用`typeof`能得到的哪些类型&quot;">​</a></h3><p><strong>JS 基础，变量的类型。</strong> 同类型的题目还有：如何判断一个变量是数组？值类型和引用类型的区别？如何实现深度拷贝？</p><h3 id="何时使用-何时使用" tabindex="-1">何时使用<code>===</code>何时使用<code>==</code> <a class="header-anchor" href="#何时使用-何时使用" aria-label="Permalink to &quot;何时使用`===`何时使用`==`&quot;">​</a></h3><p><strong>变量的运算，强制类型转换。</strong> 同类型的题目还有：快速将字符串转换为数字<code>+str</code>，以及快速将数字转换为字符串<code>num + &#39;&#39;</code></p><h3 id="window-onload-和-domcontentloaded-的区别" tabindex="-1">window.onload 和 DOMContentLoaded 的区别 <a class="header-anchor" href="#window-onload-和-domcontentloaded-的区别" aria-label="Permalink to &quot;window.onload 和 DOMContentLoaded 的区别&quot;">​</a></h3><p><strong>页面渲染过程。</strong> 同类型的题目还有：为何把<code>&lt;script&gt;</code>放在<code>&lt;body&gt;</code>底部，把 CSS 引用放在<code>&lt;head&gt;</code>中</p><h3 id="用-js-创建-10-个-a-标签-点击的时候弹出来对应的序号" tabindex="-1">用 JS 创建 10 个<code>&lt;a&gt;</code>标签，点击的时候弹出来对应的序号 <a class="header-anchor" href="#用-js-创建-10-个-a-标签-点击的时候弹出来对应的序号" aria-label="Permalink to &quot;用 JS 创建 10 个`&lt;a&gt;`标签，点击的时候弹出来对应的序号&quot;">​</a></h3><p><strong>闭包和作用域。</strong> 同类型的题目还有：jquery 或者 zepto 等为何代码都包括在一个<code>(function(window){...})(window)</code>中</p><h3 id="手写节流函数" tabindex="-1">手写节流函数 <a class="header-anchor" href="#手写节流函数" aria-label="Permalink to &quot;手写节流函数&quot;">​</a></h3><p><strong>网页性能和体验优化</strong> 同类型的题目还有：防抖函数，常见的性能优化方案</p><h3 id="promise-解决了什么问题" tabindex="-1">Promise 解决了什么问题 <a class="header-anchor" href="#promise-解决了什么问题" aria-label="Permalink to &quot;Promise 解决了什么问题&quot;">​</a></h3><p><strong>异步</strong> 同类型的问题还有：异步和同步的区别，异步有哪些应用场景，定时器的使用等</p><hr><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>上面介绍了好多个知识点，那么前端一共有多少个知识点？什么样的知识体系才能覆盖所有的面试题？下一节解答。</p>',23),d=[n];function i(s,l,c,h,_,p){return e(),o("div",null,d)}const g=a(r,[["render",i]]);export{m as __pageData,g as default};
