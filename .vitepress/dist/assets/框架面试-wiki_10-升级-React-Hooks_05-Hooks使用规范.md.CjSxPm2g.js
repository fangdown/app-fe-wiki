import{_ as s,c as i,o as a,a1 as t}from"./chunks/framework.BwTyoF0R.js";const E=JSON.parse('{"title":"Hooks 使用规范","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/10-升级-React-Hooks/05-Hooks使用规范.md","filePath":"框架面试-wiki/10-升级-React-Hooks/05-Hooks使用规范.md"}'),e={name:"框架面试-wiki/10-升级-React-Hooks/05-Hooks使用规范.md"},n=t(`<h1 id="hooks-使用规范" tabindex="-1">Hooks 使用规范 <a class="header-anchor" href="#hooks-使用规范" aria-label="Permalink to &quot;Hooks 使用规范&quot;">​</a></h1><p>已经初步认识了 React Hooks ，在继续深入学习之前，我们要说两个重要的规范。请大家一定要遵守。</p><h2 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h2><ul><li>只在代码最顶层使用 Hook ，不要在循环、判断和嵌套函数中使用。（以及不要在 Hook 之前 return 掉）</li><li>只在 React 函数组件，或自定义 Hook 中使用 <ul><li>不在 class 组件中使用</li><li>不在普通函数中使用</li></ul></li><li>eslint 插件 eslint-plugin-react-hooks 可以帮你解决以上问题</li></ul><p>安装 <code>npm install eslint-plugin-react-hooks --save-dev</code> ，然后修改 eslint 配置文件</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ESLint 配置文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...此处省略 N 行...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;react-hooks&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...此处省略 N 行...</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react-hooks/rules-of-hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查 Hook 的规则</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react-hooks/exhaustive-deps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warn&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 检查 effect 的依赖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="关于-hook-的调用顺序" tabindex="-1">关于 Hook 的调用顺序 <a class="header-anchor" href="#关于-hook-的调用顺序" aria-label="Permalink to &quot;关于 Hook 的调用顺序&quot;">​</a></h2><p>第二条规则应该不难理解：Hooks 就是给 React 函数组件使用的，不能用在其他地方。</p><ul><li>是一个函数</li><li>import React from &#39;react&#39; （普通函数，编译时不用引入 React ，也就不具备 Hooks 功能）</li><li>返回 JSX</li></ul><p>那么第一条规则，为何必须放在顶层？我们需要一探究竟。如果面试时候问到，你也能从容作答。 （参考 <code>Teach.js</code> 代码演示）</p><ul><li>无论 render 和 re-render ，所有 Hook （包括 useState useEffect 还有其他）都必须保证顺序一致，才能对应起来</li><li>如果某一个 Hook 出现在判断或者循环中，则无法保证顺序一致 （此处可代码展示一下，但不能运行）</li><li>React Hook 严重依赖于 Hook 的调用顺序！重要！！！</li></ul>`,11),l=[n];function o(k,h,p,r,c,d){return a(),i("div",null,l)}const _=s(e,[["render",o]]);export{E as __pageData,_ as default};
