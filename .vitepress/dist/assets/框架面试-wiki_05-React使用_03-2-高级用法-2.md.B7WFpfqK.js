import{_ as i,c as s,o as a,a1 as t}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"React 高级用法","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/05-React使用/03-2-高级用法-2.md","filePath":"框架面试-wiki/05-React使用/03-2-高级用法-2.md"}'),e={name:"框架面试-wiki/05-React使用/03-2-高级用法-2.md"},l=t(`<h1 id="react-高级用法" tabindex="-1">React 高级用法 <a class="header-anchor" href="#react-高级用法" aria-label="Permalink to &quot;React 高级用法&quot;">​</a></h1><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><p>React 性能优化方案，说出来可能有很多，但是那些是所有前端项目、框架都需要做的。如</p><ul><li>代码分割，代码压缩，使用生产版本的代码等（前端框架都需要，通用方案）</li><li>渲染列表时合理使用 key （vue 也有）</li><li>缓存组件（vue 也有）</li></ul><p>只有一点是 React 特色的：<strong>如何避免无效渲染？</strong>（vue 就没有这个困扰，后面再说）</p><ul><li>shouldComponentUpdate</li><li>PureComponent 和 memo</li><li>不可变数据 immutable.js</li></ul><h3 id="解释-shouldcomponentupdate" tabindex="-1">解释 shouldComponentUpdate <a class="header-anchor" href="#解释-shouldcomponentupdate" aria-label="Permalink to &quot;解释 shouldComponentUpdate&quot;">​</a></h3><ul><li>复杂项目中，React 会出现一些无效的渲染（有些可能并不影响性能，不是所有的都需要优化）</li><li>React 提供了 SCU 来让用户自己选择是否优化</li><li>SCU 返回 true 则渲染，返回 false 则不渲染。默认返回 true —— 演示一下</li></ul><p>那么问题来了 —— <strong>既然这样，能否将 SCU 都做一个判断，props 和 state 一样，就返回 true 呢？</strong></p><p>答案是不能 —— 做演示：1. 借助 propsDemo 改造；2. 使用 <code>push</code> 操作数组；3. 使用 <code>_.isEqual</code> 对比 list ；4. 再分别注释掉 <code>push</code> 和 <code>SCU</code> 做对比。</p><ul><li>回顾之前 setState 的使用，纯函数，不可变值</li><li>push 会改变 nextState 的值，因此被 SCU 拦截</li><li>SCU 必须配合不可变值一起使用</li></ul><h3 id="解释-purecomponent" tabindex="-1">解释 PureComponent <a class="header-anchor" href="#解释-purecomponent" aria-label="Permalink to &quot;解释 PureComponent&quot;">​</a></h3><ul><li>自带 shouldComponentUpdate 比较</li><li>只有浅比较（只比较函数或数组第一层属性，深层次不管）—— 深度比较太消耗性能</li><li>演示 demo （List 使用 PureComponent，使用不可变值）</li></ul><h3 id="合理使用-shouldcomponentupdate-和-purecomponent" tabindex="-1">合理使用 shouldComponentUpdate 和 PureComponent <a class="header-anchor" href="#合理使用-shouldcomponentupdate-和-purecomponent" aria-label="Permalink to &quot;合理使用 shouldComponentUpdate 和 PureComponent&quot;">​</a></h3><ul><li>一定要用不可变值，否则会留坑（这是 React 的基本里面）</li><li>推荐使用 PureComponent</li><li>同时，state 设计尽量扁平</li></ul><h3 id="react-memo" tabindex="-1">React.memo <a class="header-anchor" href="#react-memo" aria-label="Permalink to &quot;React.memo&quot;">​</a></h3><ul><li>用于函数组件（Class 组件用 SCU）</li><li>对于相同的 props ，会缓存渲染结果</li><li>默认只进浅层比较（和 PureComponent 一样）</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MyComponent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 使用 props 渲染 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="不可变值-immutable-js" tabindex="-1">不可变值 immutable.js <a class="header-anchor" href="#不可变值-immutable-js" aria-label="Permalink to &quot;不可变值 immutable.js&quot;">​</a></h3><p><a href="https://github.com/immutable-js/immutable-js" target="_blank" rel="noreferrer">https://github.com/immutable-js/immutable-js</a></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Immutable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> map2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">map2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 50</span></span></code></pre></div><ul><li>专门为 React 设计的“不可变值”工具</li><li>使用共享数据（不是深拷贝），速度很快</li><li>有一定学习成本和迁移成本，因此仅推荐复杂、大型的项目使用</li></ul><h3 id="总结一下-react-性能优化" tabindex="-1">总结一下 React 性能优化 <a class="header-anchor" href="#总结一下-react-性能优化" aria-label="Permalink to &quot;总结一下 React 性能优化&quot;">​</a></h3><p>如何避免 React 组件重复渲染</p><ul><li>SCU 和不可变值</li><li>PureComponent 和 React.memo</li><li>immutable.js</li></ul>`,25),n=[l];function h(p,o,k,r,d,c){return a(),s("div",null,n)}const E=i(e,[["render",h]]);export{m as __pageData,E as default};
