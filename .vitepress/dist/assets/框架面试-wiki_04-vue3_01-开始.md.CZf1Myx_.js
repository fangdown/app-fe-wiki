import{_ as e,c as a,o as i,a1 as t}from"./chunks/framework.BwTyoF0R.js";const v=JSON.parse('{"title":"vue 3","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/04-vue3/01-开始.md","filePath":"框架面试-wiki/04-vue3/01-开始.md"}'),l={name:"框架面试-wiki/04-vue3/01-开始.md"},o=t('<h1 id="vue-3" tabindex="-1">vue 3 <a class="header-anchor" href="#vue-3" aria-label="Permalink to &quot;vue 3&quot;">​</a></h1><p>Proxy 兼容性问题，不可 polyfill —— 不好解决，只能等所有平台的升级。</p><p>使用 <code>Object.defineProperty</code> 支持 IE11</p><p>vue 3 升级内容？？？</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li>vue3 会在 2020 年第一季度发布</li><li>vue3 使用 ts 重写（响应式，vdom，模板解析等）</li><li>vue3 增加了新玩法 —— Composition API</li></ul><h2 id="vue3-发布后-vue2-会过时吗" tabindex="-1">vue3 发布后 vue2 会过时吗 <a class="header-anchor" href="#vue3-发布后-vue2-会过时吗" aria-label="Permalink to &quot;vue3 发布后 vue2 会过时吗&quot;">​</a></h2><p>Vue3.0 会在 2020 年第一季度发布，<strong>Vue2.x 是否已经过时了</strong>？—— 近期不会过时</p><ul><li>Vue 3.0 的全面推广使用，需要持续一段时间（预计大概一年的时间）。这段时间还会继续用 2.x</li><li>Vue 2.x 已经普及，且用于很多项目，这些项目还需要维护</li><li>Vue 是平滑升级，不是断崖式升级，2.x 的功能在 3.x 照样适用。</li></ul><p>另外，当 3.0 发布且推广开来之后，课程会及时更新 3.0 的面试题。</p><p>PS：只要 vue 还是基于 MVVM 和 html 模板的设计方式，那这些内容就不会过时。就像，只要有 DOM 操作 jquery 就依然有价值。</p><h2 id="重要内容" tabindex="-1">重要内容 <a class="header-anchor" href="#重要内容" aria-label="Permalink to &quot;重要内容&quot;">​</a></h2><ul><li>Proxy 实现响应式</li><li>Composition API</li><li>其他内容，后续会继续更新</li></ul>',13),r=[o];function u(n,s,_,c,d,h){return i(),a("div",null,r)}const m=e(l,[["render",u]]);export{v as __pageData,m as default};
