import{_ as a,c as e,o as l,a1 as i}from"./chunks/framework.BwTyoF0R.js";const m=JSON.parse('{"title":"1-10000 之间的对称数（回文）","description":"","frontmatter":{},"headers":[],"relativePath":"面试刷题-wiki/06-数据结构和算法/13-回文数字.md","filePath":"面试刷题-wiki/06-数据结构和算法/13-回文数字.md"}'),r={name:"面试刷题-wiki/06-数据结构和算法/13-回文数字.md"},t=i('<h1 id="_1-10000-之间的对称数-回文" tabindex="-1">1-10000 之间的对称数（回文） <a class="header-anchor" href="#_1-10000-之间的对称数-回文" aria-label="Permalink to &quot;1-10000 之间的对称数（回文）&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>打印 1-10000 之间的对称数</p><h2 id="使用数组反转" tabindex="-1">使用数组反转 <a class="header-anchor" href="#使用数组反转" aria-label="Permalink to &quot;使用数组反转&quot;">​</a></h2><ul><li>数字转换为字符串</li><li>字符串转换为数组 reverse ，再 join 生成字符串</li><li>比较前后的字符串</li></ul><h2 id="使用字符串头尾比较" tabindex="-1">使用字符串头尾比较 <a class="header-anchor" href="#使用字符串头尾比较" aria-label="Permalink to &quot;使用字符串头尾比较&quot;">​</a></h2><ul><li>数字转换为字符串</li><li>字符串头尾比较</li></ul><p>还可以使用<strong>栈</strong>（但栈会用到数组，性能不如直接操作字符串）</p><ul><li>数字转换为字符串，求长度</li><li>如果长度是偶数，则用栈比较</li><li>如果长度是奇数，则忽略中间的数字，其他的用栈比较</li></ul><h2 id="生成反转数" tabindex="-1">生成反转数 <a class="header-anchor" href="#生成反转数" aria-label="Permalink to &quot;生成反转数&quot;">​</a></h2><ul><li>通过 <code>%</code> 和 <code>Math.floor</code> 将数字生成一个反转数</li><li>比较前后的数字</li></ul><h2 id="性能分析" tabindex="-1">性能分析 <a class="header-anchor" href="#性能分析" aria-label="Permalink to &quot;性能分析&quot;">​</a></h2><p>时间复杂度看似相当，都是 <code>O(n)</code></p><p>但 方案1 涉及到了数组的转换和操作，就需要耗费大量的时间</p><ul><li>数组 reverse 需要时间</li><li>数组和字符串的转换需要时间</li></ul><p>方案 2 3 比较，数字操作最快。电脑的原型就是计算器，所以处理数字是最快的。</p><h2 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-label="Permalink to &quot;答案&quot;">​</a></h2><p>第三种方案，参考 palindrome-number.ts</p><h2 id="划重点" tabindex="-1">划重点 <a class="header-anchor" href="#划重点" aria-label="Permalink to &quot;划重点&quot;">​</a></h2><ul><li>尽量不要使用内置 API ，不好判断时间复杂度</li><li>尽量不要转换数据格式，尤其注意数组（有序结构，不能乱来～）</li><li>数字操作最快</li></ul>',20),o=[t];function n(h,d,s,c,_,u){return l(),e("div",null,o)}const b=a(r,[["render",n]]);export{m as __pageData,b as default};
