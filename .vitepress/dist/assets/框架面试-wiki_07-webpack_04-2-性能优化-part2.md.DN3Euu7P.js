import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.BwTyoF0R.js";const g=JSON.parse('{"title":"webpack 性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"框架面试-wiki/07-webpack/04-2-性能优化-part2.md","filePath":"框架面试-wiki/07-webpack/04-2-性能优化-part2.md"}'),e={name:"框架面试-wiki/07-webpack/04-2-性能优化-part2.md"},l=n(`<h1 id="webpack-性能优化" tabindex="-1">webpack 性能优化 <a class="header-anchor" href="#webpack-性能优化" aria-label="Permalink to &quot;webpack 性能优化&quot;">​</a></h1><h2 id="产出代码优化" tabindex="-1">产出代码优化 <a class="header-anchor" href="#产出代码优化" aria-label="Permalink to &quot;产出代码优化&quot;">​</a></h2><h3 id="使用-production" tabindex="-1">使用 production <a class="header-anchor" href="#使用-production" aria-label="Permalink to &quot;使用 production&quot;">​</a></h3><ul><li>开启压缩代码</li><li>开启 tree shaking（必须是 ES6 Module 语法才行）</li></ul><p>ES6 Module 和 commonjs 的区别</p><ul><li>ES6 Module 是静态引入，编译时引入</li><li>commonjs 是动态引入，执行时引入</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonjs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../config/api.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isDev) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 可以动态引入，执行时引入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../config/api_dev.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../config/api.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isDev) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 编译时报错，只能静态引入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../config/api_dev.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="小图片-base64-编码" tabindex="-1">小图片 base64 编码 <a class="header-anchor" href="#小图片-base64-编码" aria-label="Permalink to &quot;小图片 base64 编码&quot;">​</a></h3><h3 id="bundle-加-hash" tabindex="-1">bundle 加 hash <a class="header-anchor" href="#bundle-加-hash" aria-label="Permalink to &quot;bundle 加 hash&quot;">​</a></h3><h3 id="使用-cdn" tabindex="-1">使用 CDN <a class="header-anchor" href="#使用-cdn" aria-label="Permalink to &quot;使用 CDN&quot;">​</a></h3><p>配置 publicPath</p><h3 id="提取公共改代码" tabindex="-1">提取公共改代码 <a class="header-anchor" href="#提取公共改代码" aria-label="Permalink to &quot;提取公共改代码&quot;">​</a></h3><h3 id="懒加载" tabindex="-1">懒加载 <a class="header-anchor" href="#懒加载" aria-label="Permalink to &quot;懒加载&quot;">​</a></h3><h3 id="scope-hosting-将-module-合并到一个函数中" tabindex="-1">scope hosting 将 module 合并到一个函数中 <a class="header-anchor" href="#scope-hosting-将-module-合并到一个函数中" aria-label="Permalink to &quot;scope hosting 将 module 合并到一个函数中&quot;">​</a></h3><p>使用前后的对比，使用的好处</p><p>配置如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ModuleConcatenationPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;webpack/lib/optimize/ModuleConcatenationPlugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 针对 Npm 中的第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法的文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainFields: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jsnext:main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;browser&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 开启 Scope Hoisting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleConcatenationPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同时，考虑到 Scope Hoisting 依赖源码需采用 ES6 模块化语法，还需要配置 <code>mainFields</code>。因为大部分 Npm 中的第三方库采用了 CommonJS 语法，但部分库会同时提供 ES6 模块化的代码，为了充分发挥 Scope Hoisting 的作用。</p>`,19),h=[l];function t(p,k,r,d,o,c){return a(),i("div",null,h)}const u=s(e,[["render",t]]);export{g as __pageData,u as default};
